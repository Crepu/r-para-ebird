[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Curso ROC: Análisis de datos de eBird en R",
    "section": "",
    "text": "Introducción\nEsta página contiene el material utilizado durante el Curso Roc: Análisis de datos de eBird en R.\nEl curso consta de 4 módulos:\n1. Introducción al entorno R en el contexto de eBird\n2. Buenas prácticas para el uso de datos de eBird:introduction to the eBird Basic Dataset (EBD), challenges associated with using eBird data for analysis, and best practices for preparing eBird data for modeling.\n3. Modelamiento de distribución y abundancia relativa\n4. Usos y aplicaciones de productos Estados y Tendencias:downloading eBird Status data products, loading the data into R, and using them for a variety of applications.",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "index.html#sec-intro-setup",
    "href": "index.html#sec-intro-setup",
    "title": "Curso ROC: Análisis de datos de eBird en R",
    "section": "Setup",
    "text": "Setup\nThis workshop is intended to be interactive. All examples are written in the R programming language, and the instructor will work through the examples in real time, while the attendees are encouraged following along by writing the same code. To ensure we can avoid any unnecessary delays, please follow these setup instructions prior to the workshop:\n\nCreate an eBird account if you don’t already have one and request access to the raw eBird data and/or the eBird Status data products depending on which workshops you’re attending:\n\nBest Practices for Using eBird Data: request access to the eBird Basic Dataset.\neBird Status and Trends: request access to the eBird Status data products\n\nDownload and install the latest version of R. You must have R version 4.0.0 or newer to follow along with this workshop\nDownload and install the latest version of RStudio. RStudio is not required for this workshop; however, the instructors will be using it and you may find it easier to following along if you’re working in the same environment.\nThe lessons in this workshop use a variety of R packages. To install all the necessary packages, run the following code\n\n\nif (!requireNamespace(\"remotes\", quietly = TRUE)) {\n  install.packages(\"remotes\")\n}\nremotes::install_github(\"ebird/ebird-best-practices\")\n\n\nEnsure all packages are updated to their most recent versions by clicking on the Update button on the Packages tab in RStudio.\nDownload the data package for the workshop you are attending:\n\nBest Practices for Using eBird Data\neBird Status and Trends",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "index.html#sec-intro-tidyverse",
    "href": "index.html#sec-intro-tidyverse",
    "title": "Curso ROC: Análisis de datos de eBird en R",
    "section": "Tidyverse",
    "text": "Tidyverse\nThroughout this workshop, we use packages from the Tidyverse, an opinionated collection of R packages designed for data science. Packages such as ggplot2, for data visualization, and dplyr, for data manipulation, are two of the most well known Tidyverse packages; however, there are many more. We’ll try to explain any functions as they come up; however, for a good general resource on working with data in R using the Tidyverse see the free online book R for Data Science by Hadley Wickham.\nThe one piece of the Tidyverse that we will cover up front is the pipe operator %&gt;%. The pipe takes the expression to the left of it and “pipes” it into the first argument of the expression on the right.\n\nlibrary(dplyr)\n\n# without pipe\nmean(1:10)\n#&gt; [1] 5.5\n\n# with pipe\n1:10 %&gt;% mean()\n#&gt; [1] 5.5\n\nThe pipe can code significantly more readable by avoiding nested function calls, reducing the need for intermediate variables, and making sequential operations read left-to-right. For example, to add a new variable to a data frame, then summarize using a grouping variable, the following are equivalent:\n\n# intermediate variables\nmtcars_kg &lt;- mutate(mtcars, wt_kg = 454 * wt)\nmtcars_grouped &lt;- group_by(mtcars_kg, cyl)\nsummarize(mtcars_grouped, wt_kg = mean(wt_kg))\n#&gt; # A tibble: 3 × 2\n#&gt;     cyl wt_kg\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     4 1038.\n#&gt; 2     6 1415.\n#&gt; 3     8 1816.\n\n# nested function calls\nsummarize(\n  group_by(\n    mutate(mtcars, wt_kg = 454 * wt),\n    cyl\n  ),\n  wt_kg = mean(wt_kg)\n)\n#&gt; # A tibble: 3 × 2\n#&gt;     cyl wt_kg\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     4 1038.\n#&gt; 2     6 1415.\n#&gt; 3     8 1816.\n\n# pipes\nmtcars %&gt;% \n  mutate(wt_kg = 454 * wt) %&gt;% \n  group_by(cyl) %&gt;% \n  summarize(wt_kg = mean(wt_kg))\n#&gt; # A tibble: 3 × 2\n#&gt;     cyl wt_kg\n#&gt;   &lt;dbl&gt; &lt;dbl&gt;\n#&gt; 1     4 1038.\n#&gt; 2     6 1415.\n#&gt; 3     8 1816.\n\n\n\n\n\n\n\nExercise\n\n\n\nRewrite the following code using pipes:\n\nset.seed(1)\nround(log(runif(10, min = 0.5)), 1)\n#&gt;  [1] -0.5 -0.4 -0.2  0.0 -0.5 -0.1  0.0 -0.2 -0.2 -0.6\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\nset.seed(1)\nrunif(10, min = 0.5) %&gt;% \n  log() %&gt;% \n  round(digits = 1)\n#&gt;  [1] -0.5 -0.4 -0.2  0.0 -0.5 -0.1  0.0 -0.2 -0.2 -0.6",
    "crumbs": [
      "Introducción"
    ]
  },
  {
    "objectID": "ebird.html#sec-ebird-intro",
    "href": "ebird.html#sec-ebird-intro",
    "title": "1  Best Practices for using eBird Data",
    "section": "1.1 Introduction",
    "text": "1.1 Introduction\neBird data are collected and organized around the concept of a checklist, representing observations from a single birding event, such as a 1 km walk through a park or 15 minutes observing bird feeders in your backyard. All eBird checklists contains a list of species observed and the location and time of the observations. For a subset of checklists, the observer will also provide counts of the number of individuals seen of each species, specify the amount of effort expended while collecting these data, and confirm that they are submitting a complete checklist of all the birds they were able to identify. The data provided by the checklists such as these are often referred to as semi-structured citizen science data. Importantly, complete checklists enable data users to infer counts of zero individuals for the species that were not reported. If checklists are not complete, it’s not possible to ascertain whether the absence of a species on a list was a non-detection or the result of a participant not recording the species.\nLet’s compare two eBird checklists: an incidental observation with missing counts and a complete traveling count. Both checklists can be useful, but only the second checklist provides the type of semi-structured data required for more rigorous applications."
  },
  {
    "objectID": "ebird.html#sec-ebird-download",
    "href": "ebird.html#sec-ebird-download",
    "title": "1  Best Practices for using eBird Data",
    "section": "1.2 Downloading data",
    "text": "1.2 Downloading data\neBird data are released as two tab-separated text files: the eBird Basic Dataset (EBD) containing observation data and the Sampling Event Data (SED) containing checklist data. These files are released monthly and contain all validated bird sightings in the eBird database at the time of release. In the EBD, each row corresponds to the sighting of a single species on a checklist, including the count and any other species-level information (e.g. age, sex, species comments, etc.). In the SED, each row corresponds to a checklist, including the date, time, location, effort (e.g. distance traveled, time spent, etc.), and any additional checklist-level information (e.g. whether this is a complete checklist or not).\nIn this workshop, we’ll use Fork-tailed Flycatcher observations from Rio Grande do Sul, Brazil as an example. We’ll start by downloading the corresponding eBird observation (EBD) and checklist (SED) data by visiting the eBird Basic Dataset download page and filling out the Custom Download form to request Fork-tailed Flycatcher observations from Rio Grande do Sul. Make sure you check the box “Include sampling event data”, which will include the SED in the data download in addition to the EBD.\n\n\n\n\n\n\n\nTip\n\n\n\nThe eBird database contains a massive amount of data! When requesting eBird data to download it’s important to narrow the request to as small a subset of the data as possible. For example, if we request all Fork-tailed Flycatcher observations globally, the dataset may be too large to work with in R. Instead, we’ve only requested data for a single state in Brazil.\n\n\nOnce the data are ready, you will receive an email with a download link. The downloaded data will be in a compressed .zip format, and should be unarchived. The resulting directory will contain a two text files: one for the EBD (e.g. ebd_BR-RS_fotfly_smp_relJun-2023.txt) containing all the Fork-tailed flycatcher observations from Rio Grande do Sul, and one for the SED (e.g. ebd_BR-RS_fotfly_smp_relJun-2023_sampling.txt) containing all checklists from Rio Grande do Sul, The relJune-2023 component of the file name describes which version of the EBD this dataset came from; in this case it’s the June 2023 release.\nIf you would prefer to directly download the exact dataset used in this workshop, download the data package for this workshop."
  },
  {
    "objectID": "ebird.html#sec-ebird-import",
    "href": "ebird.html#sec-ebird-import",
    "title": "1  Best Practices for using eBird Data",
    "section": "1.3 Importing eBird data into R",
    "text": "1.3 Importing eBird data into R\nThe previous step left us with two tab separated text files, one for the EBD (i.e. observation data) and one for the SED (i.e. checklist data). Start a new RStudio project and put the downloaded text files in the data/ sub-directory of the project directory.\nThe auk R package is specifically designed for working with eBird data. It includes the functions read_ebd() and read_sampling() for importing the EBD and SED, respectively, into R. First let’s import the checklist data (SED).\n\nlibrary(auk)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(sf)\n\nf_sed &lt;- \"data/ebd_BR-RS_fotfly_smp_relJun-2023_sampling.txt\"\nchecklists &lt;- read_sampling(f_sed, unique = FALSE)\nglimpse(checklists)\n#&gt; Rows: 34,005\n#&gt; Columns: 30\n#&gt; $ last_edited_date          &lt;chr&gt; \"2021-02-15 15:28:32.796728\", \"2021-12-12 14…\n#&gt; $ country                   &lt;chr&gt; \"Brazil\", \"Brazil\", \"Brazil\", \"Brazil\", \"Bra…\n#&gt; $ country_code              &lt;chr&gt; \"BR\", \"BR\", \"BR\", \"BR\", \"BR\", \"BR\", \"BR\", \"B…\n#&gt; $ state                     &lt;chr&gt; \"Rio Grande do Sul\", \"Rio Grande do Sul\", \"R…\n#&gt; $ state_code                &lt;chr&gt; \"BR-RS\", \"BR-RS\", \"BR-RS\", \"BR-RS\", \"BR-RS\",…\n#&gt; $ county                    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ county_code               &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ iba_code                  &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ bcr_code                  &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ usfws_code                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ atlas_block               &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ locality                  &lt;chr&gt; \"UFRGS--Estação Experimental Agronômica\", \"C…\n#&gt; $ locality_id               &lt;chr&gt; \"L10057337\", \"L10637103\", \"L10637103\", \"L108…\n#&gt; $ locality_type             &lt;chr&gt; \"H\", \"P\", \"P\", \"P\", \"H\", \"H\", \"H\", \"P\", \"P\",…\n#&gt; $ latitude                  &lt;dbl&gt; -30.1, -28.2, -28.2, -30.4, -32.6, -31.2, -3…\n#&gt; $ longitude                 &lt;dbl&gt; -51.7, -51.7, -51.7, -51.5, -52.8, -50.8, -5…\n#&gt; $ observation_date          &lt;date&gt; 1993-03-22, 1998-12-11, 1999-12-27, 1990-01…\n#&gt; $ time_observations_started &lt;chr&gt; \"08:00:00\", \"09:00:00\", \"09:00:00\", NA, NA, …\n#&gt; $ observer_id               &lt;chr&gt; \"obs203567\", \"obs1166183\", \"obs1166183\", \"ob…\n#&gt; $ sampling_event_identifier &lt;chr&gt; \"S81646316\", \"S98801647\", \"S98802795\", \"S758…\n#&gt; $ protocol_type             &lt;chr&gt; \"Traveling\", \"Traveling\", \"Traveling\", \"Inci…\n#&gt; $ protocol_code             &lt;chr&gt; \"P22\", \"P22\", \"P22\", \"P20\", \"P20\", \"P62\", \"P…\n#&gt; $ project_code              &lt;chr&gt; \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIRD\",…\n#&gt; $ duration_minutes          &lt;int&gt; 195, 120, 120, NA, NA, 90, NA, 80, NA, NA, N…\n#&gt; $ effort_distance_km        &lt;dbl&gt; 3.22, 2.00, 2.00, NA, NA, NA, NA, 4.00, NA, …\n#&gt; $ effort_area_ha            &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ number_observers          &lt;int&gt; 2, 1, 1, NA, NA, 2, NA, 1, 1, 2, 1, 1, 1, 2,…\n#&gt; $ all_species_reported      &lt;lgl&gt; FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALS…\n#&gt; $ group_identifier          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ trip_comments             &lt;chr&gt; NA, \"lista feita por LB.\", \"lista feita por …\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nTake some time to explore the variables in the checklist dataset. If you’re unsure about any of the variables, consult the metadata document that came with the data download (eBird_Basic_Dataset_Metadata_v1.14.pdf).\n\n\nFor some applications, only the checklist data are required. For example, the checklist data can be used to investigate the spatial and temporal distribution of eBird data within a region. This dataset can also be used to explore how much variation there is in the observation effort variables and identify checklists that have low spatial or temporal precision.\n\n\n\n\n\n\nExercise\n\n\n\nMake a histogram of the distribution of distance traveling for traveling protocol checklists.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nNearly 90% of checklists are less than 10km in length; however, some checklists are as long as 80km in length. Long traveling checklists have lower spatial precision so they should generally be removed prior to analysis.\n\nchecklists_traveling &lt;- filter(checklists, protocol_type == \"Traveling\")\nggplot(checklists_traveling) +\n  aes(x = effort_distance_km) +\n  geom_histogram(binwidth = 5) +\n  scale_y_continuous(limits = c(0, NA), labels = scales::comma) +\n  labs(x = \"Distance traveled [km]\",\n       y = \"# of eBird checklists\",\n       title = \"Distribution of distance traveled on eBird checklists\")\n\n\n\n\n\n\n\n\n\n\n\nNext, let’s import the observation data.\n\nf_ebd &lt;- \"data/ebd_BR-RS_fotfly_smp_relJun-2023.txt\"\nobservations &lt;- read_ebd(f_ebd, unique = FALSE, rollup = FALSE)\nglimpse(observations)\n#&gt; Rows: 4,810\n#&gt; Columns: 49\n#&gt; $ global_unique_identifier   &lt;chr&gt; \"URN:CornellLabOfOrnithology:EBIRD:OBS10006…\n#&gt; $ last_edited_date           &lt;chr&gt; \"2023-05-11 20:08:09.920625\", \"2022-08-04 0…\n#&gt; $ taxonomic_order            &lt;dbl&gt; 17062, 17062, 17062, 17062, 17062, 17062, 1…\n#&gt; $ category                   &lt;chr&gt; \"species\", \"species\", \"species\", \"species\",…\n#&gt; $ taxon_concept_id           &lt;chr&gt; \"avibase-A2510EF4\", \"avibase-A2510EF4\", \"av…\n#&gt; $ common_name                &lt;chr&gt; \"Fork-tailed Flycatcher\", \"Fork-tailed Flyc…\n#&gt; $ scientific_name            &lt;chr&gt; \"Tyrannus savana\", \"Tyrannus savana\", \"Tyra…\n#&gt; $ subspecies_common_name     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ subspecies_scientific_name &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ exotic_code                &lt;lgl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ observation_count          &lt;chr&gt; \"X\", \"1\", \"4\", \"1\", \"X\", \"X\", \"X\", \"X\", \"X\"…\n#&gt; $ breeding_code              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ breeding_category          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ behavior_code              &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ age_sex                    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ country                    &lt;chr&gt; \"Brazil\", \"Brazil\", \"Brazil\", \"Brazil\", \"Br…\n#&gt; $ country_code               &lt;chr&gt; \"BR\", \"BR\", \"BR\", \"BR\", \"BR\", \"BR\", \"BR\", \"…\n#&gt; $ state                      &lt;chr&gt; \"Rio Grande do Sul\", \"Rio Grande do Sul\", \"…\n#&gt; $ state_code                 &lt;chr&gt; \"BR-RS\", \"BR-RS\", \"BR-RS\", \"BR-RS\", \"BR-RS\"…\n#&gt; $ county                     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ county_code                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ iba_code                   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ bcr_code                   &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ usfws_code                 &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ atlas_block                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ locality                   &lt;chr&gt; \"São Francisco de Paula--listas históricas …\n#&gt; $ locality_id                &lt;chr&gt; \"L2862103\", \"L2453957\", \"L2312691\", \"L23126…\n#&gt; $ locality_type              &lt;chr&gt; \"H\", \"H\", \"P\", \"P\", \"P\", \"P\", \"P\", \"H\", \"H\"…\n#&gt; $ latitude                   &lt;dbl&gt; -29.4, -31.3, -29.4, -29.4, -29.7, -28.2, -…\n#&gt; $ longitude                  &lt;dbl&gt; -50.6, -51.0, -50.6, -50.6, -50.0, -51.7, -…\n#&gt; $ observation_date           &lt;date&gt; 1993-11-06, 1996-09-28, 1996-10-17, 1996-1…\n#&gt; $ time_observations_started  &lt;chr&gt; NA, \"07:00:00\", \"15:00:00\", \"06:00:00\", NA,…\n#&gt; $ observer_id                &lt;chr&gt; \"obsr477997\", \"obsr556494\", \"obsr293781\", \"…\n#&gt; $ sampling_event_identifier  &lt;chr&gt; \"S75217442\", \"S28837996\", \"S14886987\", \"S14…\n#&gt; $ protocol_type              &lt;chr&gt; \"Historical\", \"Historical\", \"Traveling\", \"T…\n#&gt; $ protocol_code              &lt;chr&gt; \"P62\", \"P62\", \"P22\", \"P22\", \"P20\", \"P22\", \"…\n#&gt; $ project_code               &lt;chr&gt; \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIRD\"…\n#&gt; $ duration_minutes           &lt;int&gt; NA, 720, 120, 480, NA, 120, NA, NA, NA, 120…\n#&gt; $ effort_distance_km         &lt;dbl&gt; NA, NA, 1.61, 6.44, NA, 2.00, NA, NA, NA, 2…\n#&gt; $ effort_area_ha             &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ number_observers           &lt;int&gt; NA, 2, 12, 12, 1, 1, 1, 2, 1, 1, 8, 8, 2, 2…\n#&gt; $ all_species_reported       &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, FALSE, TRUE, TRUE, …\n#&gt; $ group_identifier           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ has_media                  &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n#&gt; $ approved                   &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, T…\n#&gt; $ reviewed                   &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, F…\n#&gt; $ reason                     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n#&gt; $ trip_comments              &lt;chr&gt; NA, NA, \"Victor Emanuel Nature Tours birdin…\n#&gt; $ species_comments           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nTake some time to explore the variables in the observation dataset. Notice that the EBD duplicates many of the checklist-level variables from the SED.\n\n\nWhen we read the data into R, we used unique = FALSE and rollup = FALSE. By default the read functions in auk perform two important pre-processing steps: combining duplicate shared checklists and taxonomic rollup. We intentionally turned off this functionality for the purposes of demonstration.\n\n1.3.1 Shared checklists\neBird allows users to share checklists with other eBirders in their group, for example this checklist is shared by 10 observers. These checklists can be identified by looking at the group_identifier variable, which assigns an ID connecting all checklists in the group.\n\nchecklists %&gt;% \n  filter(!is.na(group_identifier)) %&gt;% \n  arrange(group_identifier) %&gt;% \n  select(sampling_event_identifier, group_identifier)\n#&gt; # A tibble: 8,632 × 2\n#&gt;   sampling_event_identifier group_identifier\n#&gt;   &lt;chr&gt;                     &lt;chr&gt;           \n#&gt; 1 S133745869                G10019405       \n#&gt; 2 S134107963                G10019405       \n#&gt; 3 S134468930                G10040061       \n#&gt; 4 S134466265                G10040061       \n#&gt; 5 S134466330                G10040062       \n#&gt; 6 S134468944                G10040062       \n#&gt; # ℹ 8,626 more rows\n\nChecklists with the same group_identifier provide duplicate information on the same birding event in the eBird database. For most analyses, it’s important to collapse these shared checklists down into a single checklist. This can be accomplished with the function auk_unique(), which retains only one independent copy of each checklist.\n\nchecklists_unique &lt;- auk_unique(checklists, checklists_only = TRUE)\nnrow(checklists)\n#&gt; [1] 34005\nnrow(checklists_unique)\n#&gt; [1] 28930\n\nNotice that a new variable, checklist_id, was created that is set to group_identifier for shared checklists and sampling_event_identifier for non-shared checklists.\n\nhead(checklists_unique$checklist_id)\n#&gt; [1] \"S81646316\" \"S98801647\" \"S98802795\" \"S7580857\"  \"S7581039\"  \"S28832587\"\ntail(checklists_unique$checklist_id)\n#&gt; [1] \"G7592371\" \"G7592372\" \"G7573316\" \"G7594361\" \"G7633009\" \"G7603956\"\n\n\n\n\n\n\n\nTip\n\n\n\nCurious what checklists and observers contributed to a shared checklist after it has been collapsed? The sampling_event_identifier and observer_id contain comma-separated lists of all checklists and observers that went into the shared checklists.\n\nchecklists_unique %&gt;% \n  filter(checklist_id == \"G10019405\") %&gt;% \n  select(checklist_id, group_identifier, sampling_event_identifier, observer_id)\n#&gt; # A tibble: 1 × 4\n#&gt;   checklist_id group_identifier sampling_event_identifier observer_id         \n#&gt;   &lt;chr&gt;        &lt;chr&gt;            &lt;chr&gt;                     &lt;chr&gt;               \n#&gt; 1 G10019405    G10019405        S133745869,S134107963     obs1481597,obs567598\n\n\n\n\n\n1.3.2 Taxonomic rollup\neBird observations can be made at levels below species (e.g. subspecies) or above species (e.g. a bird that was identified as a duck, but the species could not be determined); however, for most uses we’ll want observations at the species level. This is especially true if we want to produce detection/non-detection data from complete checklists because “complete” only applies at the species level.\n\n\n\n\n\n\nTip\n\n\n\nIn the example dataset used for this workshop, these taxonomic issues don’t apply. We have requested Fork-tailed Flycatcher observations, so we haven’t received any observations for taxa above species, and Fork-tailed Flycatcher only has a single subspecies within Rio Grande do Sul. However, in many other situations, these taxonomic issues can be important. For example, this checklist has 10 Yellow-rumped Warblers, 5 each of two Yellow-rumped Warbler subspecies, and one hybrid between the two subspecies. auk_rollup() will combine all four of these observations into a single Yellow-rumped Warbler observation.\n\n\nThe function auk_rollup() drops all observations not identifiable to a species and rolls up all observations reported below species to the species level.\n\nobservations_rollup &lt;- auk_rollup(observations)\n# only one checklist is affected by this\nobservations %&gt;% \n  filter(sampling_event_identifier == \"S99335111\") %&gt;% \n  select(sampling_event_identifier, common_name, subspecies_common_name, \n         observation_count)\n#&gt; # A tibble: 2 × 4\n#&gt;   sampling_event_identifier common_name subspecies_common_name observation_count\n#&gt;   &lt;chr&gt;                     &lt;chr&gt;       &lt;chr&gt;                  &lt;chr&gt;            \n#&gt; 1 S99335111                 Fork-taile… &lt;NA&gt;                   X                \n#&gt; 2 S99335111                 Fork-taile… Fork-tailed Flycatche… 1\nobservations_rollup %&gt;% \n  filter(sampling_event_identifier == \"S99335111\") %&gt;% \n  select(sampling_event_identifier, common_name,\n         observation_count)\n#&gt; # A tibble: 1 × 3\n#&gt;   sampling_event_identifier common_name            observation_count\n#&gt;   &lt;chr&gt;                     &lt;chr&gt;                  &lt;chr&gt;            \n#&gt; 1 S99335111                 Fork-tailed Flycatcher X\n\n\n\n\n\n\n\nTip\n\n\n\nIf multiple taxa on a single checklist roll up to the same species, auk_rollup() attempts to combine them intelligently. If each observation has a count, those counts are added together, but if any of the observations is missing a count (i.e. the count is “X”) the combined observation is also assigned an “X”. In the example checklist from the previous tip, with four taxa all rolling up to Yellow-rumped Warbler, auk_rollup() will add the four counts together to get 21 Yellow-rumped Warblers (10 + 5 + 5 + 1)."
  },
  {
    "objectID": "ebird.html#sec-ebird-zf",
    "href": "ebird.html#sec-ebird-zf",
    "title": "1  Best Practices for using eBird Data",
    "section": "1.4 Generating detection/non-detection data",
    "text": "1.4 Generating detection/non-detection data\nComplete eBird checklists are extremely valuable because, for all species that weren’t reported, we can infer counts of 0. This allows us to convert eBird from presence only data to detection/non-detection data, which allows for much more robust analyses. Note that we don’t use the term presence/absence data here because a non-detection doesn’t necessarily imply the species was absent, only that the observer didn’t detect and identify it.\nWe refer to the process of producing detection/non-detection data as “zero-filling” the eBird data because we’re filling in the missing zeros. We’ll read the eBird data into R again, filter to only complete checklists, then use the function auk_zerofill() to generate detection/non-detection data. Note that shared checklists are combined and taxonomic rollup is performed by default when using the read_*() functions from auk.\n\n# import checklist data\nchecklists &lt;- read_sampling(f_sed) %&gt;% \n  # subset to complete checklists\n  filter(all_species_reported)\n# import observation data\nobservations &lt;- read_ebd(f_ebd) %&gt;% \n  # subset to complete checklists\n  filter(all_species_reported)\n# zero-fill to produce detection/non-detection data\nzf &lt;- auk_zerofill(observations, checklists, collapse = TRUE)\nglimpse(zf)\n#&gt; Rows: 22,838\n#&gt; Columns: 38\n#&gt; $ checklist_id              &lt;chr&gt; \"S98801647\", \"S98802795\", \"S91164181\", \"S114…\n#&gt; $ last_edited_date          &lt;chr&gt; \"2021-12-12 14:52:43.115062\", \"2022-10-25 03…\n#&gt; $ country                   &lt;chr&gt; \"Brazil\", \"Brazil\", \"Brazil\", \"Brazil\", \"Bra…\n#&gt; $ country_code              &lt;chr&gt; \"BR\", \"BR\", \"BR\", \"BR\", \"BR\", \"BR\", \"BR\", \"B…\n#&gt; $ state                     &lt;chr&gt; \"Rio Grande do Sul\", \"Rio Grande do Sul\", \"R…\n#&gt; $ state_code                &lt;chr&gt; \"BR-RS\", \"BR-RS\", \"BR-RS\", \"BR-RS\", \"BR-RS\",…\n#&gt; $ county                    &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ county_code               &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ iba_code                  &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ bcr_code                  &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ usfws_code                &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ atlas_block               &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ locality                  &lt;chr&gt; \"Capela Sagrado Coração de Jesus,RS,BR\", \"Ca…\n#&gt; $ locality_id               &lt;chr&gt; \"L10637103\", \"L10637103\", \"L15616802\", \"L165…\n#&gt; $ locality_type             &lt;chr&gt; \"P\", \"P\", \"P\", \"P\", \"H\", \"P\", \"P\", \"P\", \"P\",…\n#&gt; $ latitude                  &lt;dbl&gt; -28.2, -28.2, -29.3, -29.3, -29.5, -29.3, -3…\n#&gt; $ longitude                 &lt;dbl&gt; -51.7, -51.7, -49.7, -49.7, -50.6, -50.3, -5…\n#&gt; $ observation_date          &lt;date&gt; 1998-12-11, 1999-12-27, 1989-12-27, 1992-04…\n#&gt; $ time_observations_started &lt;chr&gt; \"09:00:00\", \"09:00:00\", \"07:30:00\", NA, NA, …\n#&gt; $ observer_id               &lt;chr&gt; \"obs1166183\", \"obs1166183\", \"obs501289\", \"ob…\n#&gt; $ sampling_event_identifier &lt;chr&gt; \"S98801647\", \"S98802795\", \"S91164181\", \"S114…\n#&gt; $ protocol_type             &lt;chr&gt; \"Traveling\", \"Traveling\", \"Traveling\", \"Hist…\n#&gt; $ protocol_code             &lt;chr&gt; \"P22\", \"P22\", \"P22\", \"P62\", \"P62\", \"P22\", \"P…\n#&gt; $ project_code              &lt;chr&gt; \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIRD\", \"EBIRD\",…\n#&gt; $ duration_minutes          &lt;int&gt; 120, 120, 80, NA, NA, 180, NA, NA, 120, 480,…\n#&gt; $ effort_distance_km        &lt;dbl&gt; 2.000, 2.000, 4.000, NA, NA, 5.000, NA, NA, …\n#&gt; $ effort_area_ha            &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ number_observers          &lt;int&gt; 1, 1, 1, 1, 2, 1, 3, 3, 12, 12, 12, 2, 1, NA…\n#&gt; $ all_species_reported      &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TR…\n#&gt; $ group_identifier          &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ trip_comments             &lt;chr&gt; \"lista feita por LB.\", \"lista feita por LB.\"…\n#&gt; $ scientific_name           &lt;chr&gt; \"Tyrannus savana\", \"Tyrannus savana\", \"Tyran…\n#&gt; $ breeding_code             &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ breeding_category         &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ behavior_code             &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ age_sex                   &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ observation_count         &lt;chr&gt; \"X\", \"X\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"4\",…\n#&gt; $ species_observed          &lt;lgl&gt; TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALS…\n\nThe observation_count variable has true counts as well as “X”s, which indicate that the species was detected but the number of individuals was not counted. auk_zerofill() adds a new binary column, species_observed, indicating whether or not the species was detected.\n\nselect(zf, observation_count, species_observed) %&gt;% \n  head(10)\n#&gt; # A tibble: 10 × 2\n#&gt;   observation_count species_observed\n#&gt;   &lt;chr&gt;             &lt;lgl&gt;           \n#&gt; 1 X                 TRUE            \n#&gt; 2 X                 TRUE            \n#&gt; 3 0                 FALSE           \n#&gt; 4 0                 FALSE           \n#&gt; 5 0                 FALSE           \n#&gt; 6 0                 FALSE           \n#&gt; # ℹ 4 more rows\n\nLet’s convert the “X”s to NAs and transform observation_count to an integer variable.\n\nzf$observation_count &lt;- if_else(zf$observation_count == \"X\", \n                                NA_character_, zf$observation_count) %&gt;% \n  as.integer()\nselect(zf, observation_count, species_observed) %&gt;% \n  head(10)\n#&gt; # A tibble: 10 × 2\n#&gt;   observation_count species_observed\n#&gt;               &lt;int&gt; &lt;lgl&gt;           \n#&gt; 1                NA TRUE            \n#&gt; 2                NA TRUE            \n#&gt; 3                 0 FALSE           \n#&gt; 4                 0 FALSE           \n#&gt; 5                 0 FALSE           \n#&gt; 6                 0 FALSE           \n#&gt; # ℹ 4 more rows"
  },
  {
    "objectID": "ebird.html#sec-ebird-filtering",
    "href": "ebird.html#sec-ebird-filtering",
    "title": "1  Best Practices for using eBird Data",
    "section": "1.5 Filtering data",
    "text": "1.5 Filtering data\nNow that you have a detection/non-detection dataset, it’s likely that you want to do something with it. For example, you may want to make a map, identify priority areas for a species, or train a species distribution model. Regardless of the specific application, it’s likely that some amount of filtering of the data is required first. Some of the ways you may want to filter eBird data include:\n\nTemporal filtering: filter the data to a specific range of years or to a specific time of year.\nSpatial filtering: filter the data to focus on a specific region, e.g. a protected area.\nIncreasing precision: some eBird checklists are quite long in distance or duration leading to spatial or temporal imprecision. By removing longer checklists we can increase the spatial precision of the dataset.\nReducing variation in effort: unlike structured scientific surveys, data can be submitted to eBird using a variety of protocols and there is significant variation in effort between checklists in the eBird dataset. Variation in protocol and effort leads to variation in detectability (more effort generally leads to higher detectability). We can choose to impose more structure on the eBird dataset by filtering to reduce variation in protocol and effort.\n\nThe specific filtering you apply will depend on how you intend to use the eBird data. However, for the sake of this example, let’s filter the eBird data to only traveling and stationary checklists from 2013-2022 that are less than 6 hours in duration and 10 km in length.\n\nzf_filtered &lt;- zf %&gt;% \n  filter(year(observation_date) &gt;= 2013, year(observation_date) &lt;= 2022,\n         protocol_type %in% c(\"Traveling\", \"Stationary\"),\n         duration_minutes &lt; 6 * 60,\n         effort_distance_km &lt; 10 | protocol_type == \"Stationary\")\nnrow(zf)\n#&gt; [1] 22838\nnrow(zf_filtered)\n#&gt; [1] 16526\n\nWe reduced the number of checklists by 6,312, but the checklists remaining are of higher quality.\nFinally, many of the columns in this data frame are unnecessary or redundant, so we’ll select only the columns we need.\n\nchecklists_zf &lt;- zf_filtered %&gt;% \n  select(checklist_id, \n         latitude, longitude,\n         observation_date, time_observations_started,\n         protocol_type,\n         duration_minutes, effort_distance_km, number_observers,\n         observation_count, species_observed)"
  },
  {
    "objectID": "ebird.html#sec-ebird-applications",
    "href": "ebird.html#sec-ebird-applications",
    "title": "1  Best Practices for using eBird Data",
    "section": "1.6 Applications",
    "text": "1.6 Applications\n\n1.6.1 Detection frequency\nThe simplest thing we can do with these eBird observations is estimate the frequency of detection of Fork-tailed Flycatcher within Rio Grande do Sul. This is the proportion of eBird checklists in the region that detected the species. species_observed is a binary TRUE/FALSE column indicating if a species was detected and R treats TRUE as 1 and FALSE as 0, so we can take the average of this column to get the detection frequency.\n\nmean(checklists_zf$species_observed)\n#&gt; [1] 0.15\n\nSo, Fork-tailed Flycatcher is fairly common within this region with 15% of checklists detecting the species. Detection frequency can be used to compare the prevalence of a species between regions or over time. For example, Fork-tailed Flycatcher is migratory, so let’s look at how detection frequency changes over the months of the year.\n\nmonthly_detection &lt;- checklists_zf %&gt;% \n  mutate(month = month(observation_date)) %&gt;% \n  group_by(month) %&gt;% \n  summarize(detection_frequency = mean(species_observed))\n\n# plot monthly detection frequency\nggplot(monthly_detection) +\n  aes(x = month, y = detection_frequency) +\n  geom_line() +\n  geom_point() +\n  scale_x_continuous(breaks = 1:12) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(x = \"Month of year\",\n       y = \"Detection frequency\",\n       title = \"Monthly detection frequency for Fork-tailed Flycatcher\",\n       subtitle = \"Rio Grande do Sul, Brazil\")\n\n\n\n\n\n\n\n\nBased on this chart, Fork-tailed Flycatcher appears to arrive in Rio Grande do Sul in September and depart in February.\n\n\n\n\n\n\nExercise\n\n\n\nUse a similar technique to calculate and plot the monthly number of eBird checklists in Rio Grande do Sul. Are there differences between months? If so, what does this tell you about using number of detections from presence-only as a measure of prevalence?\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nThere is significant variability in checklist submissions per month, with twice as many checklists in February as October. If we were to look at the monthly number of detections from presence-only data we would expect more detections in months with more checklists even if the prevalence of Fork-tailed Flycatcher is the same.\n\nmonthly_checklists &lt;- count(checklists_zf, month = month(observation_date))\n\n# plot monthly number of checklists\nggplot(monthly_checklists) +\n  aes(x = month, y = n) +\n  geom_line() +\n  geom_point() +\n  scale_x_continuous(breaks = 1:12) +\n  scale_y_continuous(limits = c(0, NA), labels = scales::comma) +\n  labs(x = \"Month of year\",\n       y = \"# of eBird checklists\",\n       title = \"Monthly eBird checklist submissions in Rio Grande do Sul\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.6.2 Converting to spatial format\nMany applications of eBird data require converting the data into an explicitly spatial format, for example, to make a map or subset the observations to only those within a polygon for a protected area. The R package sf can be use to represent spatial points, lines, and polygons in R. We can convert the data frame of checklists to an sf object using the latitude and longitude.\n\nchecklists_sf &lt;- st_as_sf(checklists_zf, coords = c(\"longitude\", \"latitude\"),\n                          # 4326 is the code for an unprojected lon/lat\n                          # coordiante reference system\n                          crs = 4326)\nprint(checklists_sf)\n#&gt; Simple feature collection with 16526 features and 9 fields\n#&gt; Geometry type: POINT\n#&gt; Dimension:     XY\n#&gt; Bounding box:  xmin: -57.6 ymin: -35 xmax: -48.7 ymax: -27.1\n#&gt; Geodetic CRS:  WGS 84\n#&gt; # A tibble: 16,526 × 10\n#&gt;   checklist_id observation_date time_observations_started protocol_type\n#&gt; * &lt;chr&gt;        &lt;date&gt;           &lt;chr&gt;                     &lt;chr&gt;        \n#&gt; 1 S117444976   2013-05-18       07:47:00                  Traveling    \n#&gt; 2 S117215031   2013-04-14       07:53:00                  Traveling    \n#&gt; 3 S53740464    2013-01-11       08:00:00                  Traveling    \n#&gt; 4 S16023053    2013-12-14       17:30:00                  Stationary   \n#&gt; 5 S15844084    2013-12-03       13:00:00                  Traveling    \n#&gt; 6 S117214399   2013-03-16       07:36:00                  Traveling    \n#&gt; # ℹ 16,520 more rows\n#&gt; # ℹ 6 more variables: duration_minutes &lt;int&gt;, effort_distance_km &lt;dbl&gt;,\n#&gt; #   number_observers &lt;int&gt;, observation_count &lt;int&gt;, species_observed &lt;lgl&gt;,\n#&gt; #   geometry &lt;POINT [°]&gt;\n\nImagine that we’re only interested in observations from within 50 km of Gramado, Brazil (29.375°S, 50.876°W). We can use sf to generate a circle of radium 50 km centered on Gramado, then subset observations to only those falling within the circle.\n\ngramado_point &lt;- st_sfc(st_point(c(-50.876, -29.375)), crs = 4326)\n# 50km = 50,000m\ngramado_circle &lt;- st_buffer(gramado_point, dist = 50000)\nchecklists_gramado &lt;- checklists_sf[gramado_circle, ]\n\nWe could now, for example, calculate the detection frequency in the area around Gramado.\n\nmean(checklists_gramado$species_observed)\n#&gt; [1] 0.097\n\nFinally, in many cases, it may be more convenient to work with eBird data outside of R in a GIS such as QGIS, a free and open source GIS. We can export the Fork-tailed Flycatcher observations to a GeoPackage using sf.\n\nwrite_sf(checklists_sf, \"data/fotfly-ebird_br-rs.gpkg\",\n         layer = \"fotfly_observations\")\n\n\n\n\n\n\n\nTip\n\n\n\nThe GeoPackage is a modern, open source alternative to the shapefile format for storing spatial data. GeoPackages avoid many of the problems and limitations associated with shapefiles, and they are much more efficient than shapefiles. The online ArcGIS documentation provides instructions for how to open a GeoPackage in ArcGIS.\n\n\n\n\n1.6.3 Mapping\nNow that we have the data in a spatial format, we can produce a map of the Fork-tailed Flycatcher detection/non-detection data. For complex, highly customized maps, we recommend using a GIS such as QGIS that’s specifically designed for cartography. However, it is possible to make a quick, simple map in R.\nWe’ll start by loading polygons defining coutry and state borders, which will provide contextual information for our map. These polygons come from Natural Earth, and excellent source of global, attribution free spatial data. The R package rnaturalearth provides access to Natural Earth data within R; however, for convenience we’ve provided the necessary layers in the file data/gis-data.gpkg included in the data package for this workshop. We’ll also project everything to an equal area projection center on Rio Grande do Sul.\n\ncrs &lt;- st_crs(\"+proj=laea +lat_0=-30 +lon_0=-50\")\n\n# polygons from natural earth\nne_land &lt;- read_sf(\"data/gis-data.gpkg\", \"ne_land\") %&gt;% \n  st_transform(crs = crs)\nne_country_lines &lt;- read_sf(\"data/gis-data.gpkg\", \"ne_country_lines\") %&gt;% \n  st_transform(crs = crs)\nrgds_boundary &lt;- read_sf(\"data/gis-data.gpkg\", \"ne_states\") %&gt;% \n  filter(state_code == \"BR-RS\") %&gt;% \n  st_transform(crs = crs)\n\n# transform ebird data to equal area projection\nchecklists_proj &lt;- st_transform(checklists_sf, crs = crs)\n\nNow we can make a map of observations of Fork-tailed Flycatcher in Rio Grande do Sul. We build up the map in layers, first creating a basemap with the Natural Earth polygons, then plotting the eBird detection and non-detection data on top. When building up a map in layes like this, it’s often useful to first plot a blank version the main dataset you intend to map to define the spatial extent of the map, then layer everything else on top, finishing with plotting the data a second time so it appears as the top layer.\n\npar(mar = c(0.25, 0.25, 2, 0.25))\n\n# start with a blank plot of the data to define the spatial extent of the map\nplot(st_geometry(checklists_proj), col = NA)\n\n# contextual gis data\nplot(ne_land, col = \"#dddddd\", border = \"#888888\", lwd = 0.5, add = TRUE)\nplot(rgds_boundary, col = \"#cccccc\", border = NA, add = TRUE)\n#&gt; Warning in plot.sf(rgds_boundary, col = \"#cccccc\", border = NA, add = TRUE):\n#&gt; ignoring all but the first attribute\nplot(ne_country_lines, col = \"#ffffff\", lwd = 1.5, add = TRUE)\n\n# ebird observations\n# not detected\nplot(filter(checklists_proj, !species_observed),\n     pch = 19, cex = 0.2, col = alpha(\"#555555\", 0.5),\n     add = TRUE)\n#&gt; Warning in plot.sf(filter(checklists_proj, !species_observed), pch = 19, :\n#&gt; ignoring all but the first attribute\n# detected\nplot(filter(checklists_proj, species_observed),\n     pch = 19, cex = 0.3, col = alpha(\"#4daf4a\", 1),\n     add = TRUE)\n#&gt; Warning in plot.sf(filter(checklists_proj, species_observed), pch = 19, :\n#&gt; ignoring all but the first attribute\n# legend\nlegend(\"bottomright\", bty = \"n\",\n       col = c(\"#555555\", \"#4daf4a\"),\n       legend = c(\"eBird checklists\", \"Fork-tailed Flycatcher sightings\"),\n       pch = 19)\nbox()\ntitle(\"Fork-tailed Flycatcher eBird Observations (2013-2022)\")"
  },
  {
    "objectID": "ebirdst.html#sec-ebirdst-access",
    "href": "ebirdst.html#sec-ebirdst-access",
    "title": "2  eBird Status Data Products",
    "section": "2.1 Data access",
    "text": "2.1 Data access\nAccess to the eBird Status Data Products is granted through an Access Request Form at: https://ebird.org/st/request. The terms of use have been desiged to be quite permissive in many cases, particularly academic and research use. After reading the eBird Status and Trends Products Terms of Use and filling out the Access Request Form you will be provided with an alphanumeric access key. To store the access key so it can be accessed by R and the ebirdst package, run the following (replacing \"XXXXXXXXX\" with your actual key):\n\nset_ebirdst_access_key(\"XXXXXXXXX\")\n\nThen immediately restart R. This will save the access key as the environment variable EBIRDST_KEY in your .Renviron file so it’s accessible within your R session.\n\n\n\n\n\n\nCheckpoint\n\n\n\nTo ensure your data access key is working, attempt run the following code, which will download a single small file. Speak to the instructor if this doesn’t work.\n\nebirdst_download(\"grbfir1\", pattern = \"abundance_median_lr_2021\", force = TRUE)"
  },
  {
    "objectID": "ebirdst.html#sec-ebirdst-species",
    "href": "ebirdst.html#sec-ebirdst-species",
    "title": "2  eBird Status Data Products",
    "section": "2.2 Status and Trends species",
    "text": "2.2 Status and Trends species\nThe ebirdst_runs object is a data frame listing all the available species:\n\nglimpse(ebirdst_runs)\n#&gt; Rows: 2,282\n#&gt; Columns: 23\n#&gt; $ species_code                         &lt;chr&gt; \"grerhe1\", \"higtin1\", \"gretin1\", …\n#&gt; $ scientific_name                      &lt;chr&gt; \"Rhea americana\", \"Nothocercus bo…\n#&gt; $ common_name                          &lt;chr&gt; \"Greater Rhea\", \"Highland Tinamou…\n#&gt; $ resident                             &lt;lgl&gt; TRUE, TRUE, TRUE, TRUE, TRUE, TRU…\n#&gt; $ breeding_quality                     &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, N…\n#&gt; $ breeding_range_modeled               &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, N…\n#&gt; $ breeding_start                       &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ breeding_end                         &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ nonbreeding_quality                  &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, N…\n#&gt; $ nonbreeding_range_modeled            &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, N…\n#&gt; $ nonbreeding_start                    &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ nonbreeding_end                      &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ postbreeding_migration_quality       &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, N…\n#&gt; $ postbreeding_migration_range_modeled &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, N…\n#&gt; $ postbreeding_migration_start         &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ postbreeding_migration_end           &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ prebreeding_migration_quality        &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, N…\n#&gt; $ prebreeding_migration_range_modeled  &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, N…\n#&gt; $ prebreeding_migration_start          &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ prebreeding_migration_end            &lt;date&gt; NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ resident_quality                     &lt;chr&gt; \"2\", \"1\", \"2\", \"3\", \"3\", \"2\", \"2\"…\n#&gt; $ resident_start                       &lt;date&gt; 2021-01-04, 2021-01-04, 2021-01-…\n#&gt; $ resident_end                         &lt;date&gt; 2021-12-28, 2021-12-28, 2021-12-…\n\nIf you’re working in RStudio, you can use View() to interactively explore this data frame. You can also consult the Status and Trends species page the full list of available species. On this page you can also filter by region, for example to see only those species with some portion of their range falling within Brazil.\n\n2.2.1 Expert review\nAll species go through a process of expert human review prior to being released. The ebirdst_runs data frame also contains information from this review process. Reviewers assess each of the four seasons: breeding, non-breeding, pre-breeding migration, and post-breeding migration. Resident (i.e., non-migratory) species are identified by having TRUE in the resident column of ebirdst_runs, and these species are assessed across the whole year rather than seasonally. ebirdst_runs contains two important pieces of information for each season: a quality rating and seasonal dates.\nThe seasonal dates define the weeks that fall within each season; the relative abundance estimates for these weeks get averaged to produce the seasonal relative abundance maps on the Status and Trends website. Breeding and non-breeding season dates are defined for each species as the weeks during those seasons when the species’ population does not move. For this reason, these seasons are also described as stationary periods. Migration periods are defined as the periods of movement between the stationary non-breeding and breeding seasons. Note that for many species these migratory periods include not only movement from breeding grounds to non-breeding grounds, but also post-breeding dispersal, molt migration, and other movements.\nReviewers also examine the model estimates for each season to assess the amount of extrapolation or omission present in the model, and assign an associated quality rating ranging from 0 (lowest quality) to 3 (highest quality). Extrapolation refers to cases where the model predicts occurrence where the species is known to be absent, while omission refers to the model failing to predict occurrence where a species is known to be present.\nA rating of 0 implies this season failed review and model results should not be used at all for this period. Ratings of 1-3 correspond to a gradient of more to less extrapolation and/or omission, and we often use a traffic light analogy when referring to them:\n\nRed light (1): low quality, extensive extrapolation and/or omission and noise, but at least some regions have estimates that are accurate; can be used with caution in certain regions.\nYellow light (2): medium quality, some extrapolation and/or omission; use with caution.\nGreen light (3): high quality, very little or no extrapolation and/or omission; these seasons can be safely used.\n\n\n\n\n\n\n\nExercise\n\n\n\nLook up a species of interest to you. Identify the seasonal dates and the review quality ratings.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nGreen-backed Firecrown is coded as a migrant with all four seasons receiving quality ratings of 2 suggesting there is some extrapolation or omission.\n\nebirdst_runs %&gt;% \n  filter(common_name == \"Green-backed Firecrown\") %&gt;% \n  glimpse()\n#&gt; Rows: 1\n#&gt; Columns: 23\n#&gt; $ species_code                         &lt;chr&gt; \"grbfir1\"\n#&gt; $ scientific_name                      &lt;chr&gt; \"Sephanoides sephaniodes\"\n#&gt; $ common_name                          &lt;chr&gt; \"Green-backed Firecrown\"\n#&gt; $ resident                             &lt;lgl&gt; FALSE\n#&gt; $ breeding_quality                     &lt;chr&gt; \"2\"\n#&gt; $ breeding_range_modeled               &lt;chr&gt; \"TRUE\"\n#&gt; $ breeding_start                       &lt;date&gt; 2021-11-23\n#&gt; $ breeding_end                         &lt;date&gt; 2021-04-26\n#&gt; $ nonbreeding_quality                  &lt;chr&gt; \"2\"\n#&gt; $ nonbreeding_range_modeled            &lt;chr&gt; \"TRUE\"\n#&gt; $ nonbreeding_start                    &lt;date&gt; 2021-06-14\n#&gt; $ nonbreeding_end                      &lt;date&gt; 2021-08-31\n#&gt; $ postbreeding_migration_quality       &lt;chr&gt; \"2\"\n#&gt; $ postbreeding_migration_range_modeled &lt;chr&gt; \"TRUE\"\n#&gt; $ postbreeding_migration_start         &lt;date&gt; 2021-05-03\n#&gt; $ postbreeding_migration_end           &lt;date&gt; 2021-06-07\n#&gt; $ prebreeding_migration_quality        &lt;chr&gt; \"2\"\n#&gt; $ prebreeding_migration_range_modeled  &lt;chr&gt; \"TRUE\"\n#&gt; $ prebreeding_migration_start          &lt;date&gt; 2021-09-07\n#&gt; $ prebreeding_migration_end            &lt;date&gt; 2021-11-16\n#&gt; $ resident_quality                     &lt;chr&gt; NA\n#&gt; $ resident_start                       &lt;date&gt; NA\n#&gt; $ resident_end                         &lt;date&gt; NA"
  },
  {
    "objectID": "ebirdst.html#sec-ebirdst-download",
    "href": "ebirdst.html#sec-ebirdst-download",
    "title": "2  eBird Status Data Products",
    "section": "2.3 Downloading data",
    "text": "2.3 Downloading data\nThe function ebirdst_download() downloads data for a single species given a species name (common name, scientific name, or species code). For example, to download the data for Green-backed Firecrown use:\n\npath &lt;- ebirdst_download(species = \"Green-backed Firecrown\")\npath\n\n\n#&gt; [1] \"/Users/mes335/data/ebirdst/2021/grbfir1\"\n\nThe function will automatically identify a suitable location to store the downloaded data and return that path, which we captured in the variable path. We can see which files were downloaded with:\n\nlist.files(path, recursive = TRUE)\n#&gt;  [1] \"config.json\"                                                   \n#&gt;  [2] \"ranges/grbfir1_range_raw_lr_2021.gpkg\"                         \n#&gt;  [3] \"ranges/grbfir1_range_raw_mr_2021.gpkg\"                         \n#&gt;  [4] \"ranges/grbfir1_range_smooth_lr_2021.gpkg\"                      \n#&gt;  [5] \"ranges/grbfir1_range_smooth_mr_2021.gpkg\"                      \n#&gt;  [6] \"regional_stats.csv\"                                            \n#&gt;  [7] \"seasonal/band-seasons.csv\"                                     \n#&gt;  [8] \"seasonal/grbfir1_abundance_full-year_max_hr_2021.tif\"          \n#&gt;  [9] \"seasonal/grbfir1_abundance_full-year_max_lr_2021.tif\"          \n#&gt; [10] \"seasonal/grbfir1_abundance_full-year_max_mr_2021.tif\"          \n#&gt; [11] \"seasonal/grbfir1_abundance_full-year_mean_hr_2021.tif\"         \n#&gt; [12] \"seasonal/grbfir1_abundance_full-year_mean_lr_2021.tif\"         \n#&gt; [13] \"seasonal/grbfir1_abundance_full-year_mean_mr_2021.tif\"         \n#&gt; [14] \"seasonal/grbfir1_abundance_seasonal_max_hr_2021.tif\"           \n#&gt; [15] \"seasonal/grbfir1_abundance_seasonal_max_lr_2021.tif\"           \n#&gt; [16] \"seasonal/grbfir1_abundance_seasonal_max_mr_2021.tif\"           \n#&gt; [17] \"seasonal/grbfir1_abundance_seasonal_mean_hr_2021.tif\"          \n#&gt; [18] \"seasonal/grbfir1_abundance_seasonal_mean_lr_2021.tif\"          \n#&gt; [19] \"seasonal/grbfir1_abundance_seasonal_mean_mr_2021.tif\"          \n#&gt; [20] \"seasonal/grbfir1_count_full-year_max_hr_2021.tif\"              \n#&gt; [21] \"seasonal/grbfir1_count_full-year_max_lr_2021.tif\"              \n#&gt; [22] \"seasonal/grbfir1_count_full-year_max_mr_2021.tif\"              \n#&gt; [23] \"seasonal/grbfir1_count_full-year_mean_hr_2021.tif\"             \n#&gt; [24] \"seasonal/grbfir1_count_full-year_mean_lr_2021.tif\"             \n#&gt; [25] \"seasonal/grbfir1_count_full-year_mean_mr_2021.tif\"             \n#&gt; [26] \"seasonal/grbfir1_count_seasonal_max_hr_2021.tif\"               \n#&gt; [27] \"seasonal/grbfir1_count_seasonal_max_lr_2021.tif\"               \n#&gt; [28] \"seasonal/grbfir1_count_seasonal_max_mr_2021.tif\"               \n#&gt; [29] \"seasonal/grbfir1_count_seasonal_mean_hr_2021.tif\"              \n#&gt; [30] \"seasonal/grbfir1_count_seasonal_mean_lr_2021.tif\"              \n#&gt; [31] \"seasonal/grbfir1_count_seasonal_mean_mr_2021.tif\"              \n#&gt; [32] \"seasonal/grbfir1_occurrence_full-year_max_hr_2021.tif\"         \n#&gt; [33] \"seasonal/grbfir1_occurrence_full-year_max_lr_2021.tif\"         \n#&gt; [34] \"seasonal/grbfir1_occurrence_full-year_max_mr_2021.tif\"         \n#&gt; [35] \"seasonal/grbfir1_occurrence_full-year_mean_hr_2021.tif\"        \n#&gt; [36] \"seasonal/grbfir1_occurrence_full-year_mean_lr_2021.tif\"        \n#&gt; [37] \"seasonal/grbfir1_occurrence_full-year_mean_mr_2021.tif\"        \n#&gt; [38] \"seasonal/grbfir1_occurrence_seasonal_max_hr_2021.tif\"          \n#&gt; [39] \"seasonal/grbfir1_occurrence_seasonal_max_lr_2021.tif\"          \n#&gt; [40] \"seasonal/grbfir1_occurrence_seasonal_max_mr_2021.tif\"          \n#&gt; [41] \"seasonal/grbfir1_occurrence_seasonal_mean_hr_2021.tif\"         \n#&gt; [42] \"seasonal/grbfir1_occurrence_seasonal_mean_lr_2021.tif\"         \n#&gt; [43] \"seasonal/grbfir1_occurrence_seasonal_mean_mr_2021.tif\"         \n#&gt; [44] \"seasonal/grbfir1_percent-population_full-year_max_hr_2021.tif\" \n#&gt; [45] \"seasonal/grbfir1_percent-population_full-year_max_lr_2021.tif\" \n#&gt; [46] \"seasonal/grbfir1_percent-population_full-year_max_mr_2021.tif\" \n#&gt; [47] \"seasonal/grbfir1_percent-population_full-year_mean_hr_2021.tif\"\n#&gt; [48] \"seasonal/grbfir1_percent-population_full-year_mean_lr_2021.tif\"\n#&gt; [49] \"seasonal/grbfir1_percent-population_full-year_mean_mr_2021.tif\"\n#&gt; [50] \"seasonal/grbfir1_percent-population_seasonal_max_hr_2021.tif\"  \n#&gt; [51] \"seasonal/grbfir1_percent-population_seasonal_max_lr_2021.tif\"  \n#&gt; [52] \"seasonal/grbfir1_percent-population_seasonal_max_mr_2021.tif\"  \n#&gt; [53] \"seasonal/grbfir1_percent-population_seasonal_mean_hr_2021.tif\" \n#&gt; [54] \"seasonal/grbfir1_percent-population_seasonal_mean_lr_2021.tif\" \n#&gt; [55] \"seasonal/grbfir1_percent-population_seasonal_mean_mr_2021.tif\" \n#&gt; [56] \"weekly/band-dates.csv\"                                         \n#&gt; [57] \"weekly/grbfir1_abundance_lower_hr_2021.tif\"                    \n#&gt; [58] \"weekly/grbfir1_abundance_lower_lr_2021.tif\"                    \n#&gt; [59] \"weekly/grbfir1_abundance_lower_mr_2021.tif\"                    \n#&gt; [60] \"weekly/grbfir1_abundance_median_hr_2021.tif\"                   \n#&gt; [61] \"weekly/grbfir1_abundance_median_lr_2021.tif\"                   \n#&gt; [62] \"weekly/grbfir1_abundance_median_mr_2021.tif\"                   \n#&gt; [63] \"weekly/grbfir1_abundance_upper_hr_2021.tif\"                    \n#&gt; [64] \"weekly/grbfir1_abundance_upper_lr_2021.tif\"                    \n#&gt; [65] \"weekly/grbfir1_abundance_upper_mr_2021.tif\"                    \n#&gt; [66] \"weekly/grbfir1_centroids.csv\"                                  \n#&gt; [67] \"weekly/grbfir1_count_median_hr_2021.tif\"                       \n#&gt; [68] \"weekly/grbfir1_count_median_lr_2021.tif\"                       \n#&gt; [69] \"weekly/grbfir1_count_median_mr_2021.tif\"                       \n#&gt; [70] \"weekly/grbfir1_occurrence_median_hr_2021.tif\"                  \n#&gt; [71] \"weekly/grbfir1_occurrence_median_lr_2021.tif\"                  \n#&gt; [72] \"weekly/grbfir1_occurrence_median_mr_2021.tif\"                  \n#&gt; [73] \"weekly/grbfir1_percent-population_median_hr_2021.tif\"          \n#&gt; [74] \"weekly/grbfir1_percent-population_median_lr_2021.tif\"          \n#&gt; [75] \"weekly/grbfir1_percent-population_median_mr_2021.tif\"\n\nWithin this data package directory, the files are organized according to the following structure:\n\nweekly/: a directory containing weekly estimates of occurrence, count, relative abundance, and percent of population on a regular grid in GeoTIFF format at three resolutions. See below for more details.\nseasonal/: a directory containing seasonal estimates of occurrence, count, relative abundance, and percent of population on a regular grid in GeoTIFF format at three resolutions. These are derived from the corresponding weekly raster data. Dates defining the boundary of each season are set on a species-specific basis by an expert reviewer familiar with the species. These dates are available in the ebirdst_runs data frame. Only seasons that passed the expert review process are included. See below for more details.\nranges/: a directory containing GeoPackages storing range boundary polygons. See below for more details.\nconfig.json: run-specific parameters, mostly for internal use, but also containing useful parameters for mapping the abundance data.\n\n\n\n\n\n\n\nTip\n\n\n\nSpatial data fall into two broad categories: raster data and vector data. Raster data represents spatial data as a regular grid of cells with a value or set of values assigned to each. Vector data represents spatial data as discrete points, lines, or polygons. In the eBird Status data products, raster data are distributed as GeoTIFFs, while vector data are distributed as GeoPackages.\n\n\nFor a species whose data have already been downloaded, you can use get_species_path(\"Green-backed Firecrown\") to identify the path to the data.\n\n2.3.1 Downloading specific files\nThe full data package for each species contains a large number of files, many of which may be unnecessary for your application. You can use the dry_run = TRUE argument to ebirdst_download() to list the available files without downloading them.\n\nebirdst_download(\"Green-backed Firecrown\", dry_run = TRUE)\n\nThen, once you’ve identified the files you want, you can use the pattern argument to download only those files. For example, imagine we only want the abundance files:\n\nebirdst_download(\"Green-backed Firecrown\", pattern = \"abundance\")\n\n\n\n\n\n\n\nTip\n\n\n\nTo avoid any issues resulting from all participants downloading data over a slow internet connection at the same time, for the remainder of this lesson we’ll use data included in the data package for this workshop. These data packages should be in the data/ebirst-data/ subdirectory of your RStudio project. To find the path to the data for a particular species using a non-standard download location, use\n\npath &lt;- get_species_path(\"Green-backed Firecrown\", path = \"data/ebirdst-data/\")\npath\n#&gt; [1] \"data/ebirdst-data//2021/grbfir1\"\n\nHowever, when working with eBird Status data products after this workshop, it’s best to use the standard download location and skip adding path = \"data/ebirdst-data/\"."
  },
  {
    "objectID": "ebirdst.html#sec-ebirdst-load",
    "href": "ebirdst.html#sec-ebirdst-load",
    "title": "2  eBird Status Data Products",
    "section": "2.4 Loading data in R",
    "text": "2.4 Loading data in R\nIn this workshop, we’ll focus on the raster data products, which can all be loaded into R using the ebirdst function load_raster(). In R, we’ll use the terra package to work with raster data. Raster data products fall into two broad categories providing weekly and seasonal estimates.\n\n2.4.1 Weekly raster estimates\nThe core raster data products are the weekly estimates of occurrence, count, relative abundance, and percent of population. All estimates are the median expected value for a 1km, 1 hour eBird Traveling Count by an expert eBird observer at the optimal time of day and for optimal weather conditions to observe the given species.\n\nOccurrence occurrence: the expected probability of encountering a species.\nCount count: the expected count of a species, conditional on its occurrence at the given location.\nRelative abundance abundance: the expected relative abundance of a species, computed as the product of the probability of occurrence and the count conditional on occurrence. In addition to the median relative abundance, upper and lower confidence intervals (CIs) are provided, defined at the 10th and 90th quantile of relative abundance, respectively.\nPercent of population precent-population: the proportion of the total relative abundance within each cell. This is a derived product calculated by dividing each cell value in the relative abundance raster by the sum of all cell values\n\nAll predictions are made on a standard 2.96km x 2.96km global grid, however, for convenience lower resolution GeoTIFFs are also provided, which are typically much faster to work with. The three resolutions are:\n\nHigh resolution (hr): the native 2.96 km resolution data\nMedium resolution (mr): the hr data aggregated by a factor of 3 in each direction resulting in a resolution of 8.89 km\nLow resolution (lr): the hr data aggregated by a factor of 9 in each direction resulting in a resolution of 26.7 km\n\nThe weekly cubes use the following naming convention:\nweekly/&lt;species_code&gt;_&lt;product&gt;_&lt;metric&gt;_&lt;resolution&gt;_&lt;year&gt;.tif\nwhere metric is typically median, except for the relative abundance CIs, which use lower and upper. The function load_raster() is used to load these data into R and takes arguments for product, metric and resolution. For example, to load the high resolution median relative abundance, use\n\nabd_median_hr &lt;- load_raster(path, product = \"abundance\", resolution = \"hr\")\nprint(abd_median_hr)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 5630, 13511, 52  (nrow, ncol, nlyr)\n#&gt; resolution  : 2963, 2963  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6673060, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : grbfir1_abundance_median_hr_2021.tif \n#&gt; names       : 2021-01-04, 2021-01-11, 2021-01-18, 2021-01-25, 2021-02-01, 2021-02-08, ... \n#&gt; min values  :       0.00,        0.0,       0.00,       0.00,       0.00,        0.0, ... \n#&gt; max values  :       4.19,        4.9,       4.23,       4.13,       4.84,        5.4, ...\n\nWe often refer to these raster objects as “weekly cubes” (e.g. the “weekly abundance cube”). Notice that the cubes contains 52 layers, corresponding to the weeks of the year. The layer names are the dates associated with the mid-point of each week.\n\nas.Date(names(abd_median_hr))\n#&gt;  [1] \"2021-01-04\" \"2021-01-11\" \"2021-01-18\" \"2021-01-25\" \"2021-02-01\"\n#&gt;  [6] \"2021-02-08\" \"2021-02-15\" \"2021-02-22\" \"2021-03-01\" \"2021-03-08\"\n#&gt; [11] \"2021-03-15\" \"2021-03-22\" \"2021-03-29\" \"2021-04-05\" \"2021-04-12\"\n#&gt; [16] \"2021-04-19\" \"2021-04-26\" \"2021-05-03\" \"2021-05-10\" \"2021-05-17\"\n#&gt; [21] \"2021-05-24\" \"2021-05-31\" \"2021-06-07\" \"2021-06-14\" \"2021-06-21\"\n#&gt; [26] \"2021-06-28\" \"2021-07-06\" \"2021-07-13\" \"2021-07-20\" \"2021-07-27\"\n#&gt; [31] \"2021-08-03\" \"2021-08-10\" \"2021-08-17\" \"2021-08-24\" \"2021-08-31\"\n#&gt; [36] \"2021-09-07\" \"2021-09-14\" \"2021-09-21\" \"2021-09-28\" \"2021-10-05\"\n#&gt; [41] \"2021-10-12\" \"2021-10-19\" \"2021-10-26\" \"2021-11-02\" \"2021-11-09\"\n#&gt; [46] \"2021-11-16\" \"2021-11-23\" \"2021-11-30\" \"2021-12-07\" \"2021-12-14\"\n#&gt; [51] \"2021-12-21\" \"2021-12-28\"\n\nAs another example, we could load the low resolution upper and lower abundance confidence intervals.\n\nabd_lower_lr &lt;- load_raster(path, product = \"abundance\", metric = \"lower\", \n                            resolution = \"lr\")\nabd_upper_lr &lt;- load_raster(path, product = \"abundance\", metric = \"upper\", \n                            resolution = \"lr\")\n\n\n\n\n\n\n\nExercise\n\n\n\nTry loading the weekly median percent of population cube at medium resolution.\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\n\npct_pop &lt;- load_raster(path, product = \"percent-population\", metric = \"median\", \n                       resolution = \"mr\")\nprint(pct_pop)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 52  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : grbfir1_percent-population_median_mr_2021.tif \n#&gt; names       : 2021-01-04, 2021-01-11, 2021-01-18, 2021-01-25, 2021-02-01, 2021-02-08, ... \n#&gt; min values  :    0.00000,     0.0000,    0.00000,    0.00000,    0.00000,    0.00000, ... \n#&gt; max values  :    0.00105,     0.0011,    0.00104,    0.00133,    0.00143,    0.00151, ...\n\n\n\n\n\n\n2.4.2 Seasonal raster estimates\nThe seasonal raster estimates are provided for the same set of products and at the same three resolutions as the weekly estimates. They’re derived from the weekly data by taking the cell-wise mean or max across the weeks within each season. Recall that the seasonal boundary dates are available in the data frame ebirdst_runs; data is not provided for seasons with a quality score of 0.\nThe seasonal GeoTIFFs use the following naming convention:\nseasonal/&lt;species_code&gt;_&lt;product&gt;_seasonal_&lt;metric&gt;_&lt;resolution&gt;_&lt;year&gt;.tif\nwhere metric is either mean or max. The function load_raster(period = \"seasonal\") is used to load these data into R and takes arguments for product, metric and resolution. For example, to load the low resolution mean seasonal relative abundance, use\n\nabd_seasonal_mean &lt;- load_raster(path, product = \"abundance\", \n                                 period = \"seasonal\", metric = \"mean\", \n                                 resolution = \"lr\")\nprint(abd_seasonal_mean)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 626, 1502, 4  (nrow, ncol, nlyr)\n#&gt; resolution  : 26665, 26665  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6684911, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : grbfir1_abundance_seasonal_mean_lr_2021.tif \n#&gt; names       : breeding, nonbreeding, prebree~gration, postbre~gration \n#&gt; min values  :     0.00,        0.00,            0.00,             0.0 \n#&gt; max values  :     2.39,        3.04,            1.98,             3.4\n\nNotice there are four layers in this raster corresponding to the four seasons.\n\nnames(abd_seasonal_mean)\n#&gt; [1] \"breeding\"               \"nonbreeding\"            \"prebreeding_migration\" \n#&gt; [4] \"postbreeding_migration\"\n\nFinally, as a convenience, the data products include year-round rasters summarizing the mean or max across all weeks that fall within a season that passed the expert review process. These can be accessed similarly to the seasonal products, just with period = \"full-year\" instead. For example, these layers can be used in conservation planning to assess the most important sites across the full range and full annual cycle of a species.\n\nabd_fy_max &lt;- load_raster(path, product = \"abundance\", \n                          period = \"full-year\", metric = \"max\", \n                          resolution = \"hr\")"
  },
  {
    "objectID": "ebirdst.html#sec-ebirdst-explore",
    "href": "ebirdst.html#sec-ebirdst-explore",
    "title": "2  eBird Status Data Products",
    "section": "2.5 Exploring the raster data",
    "text": "2.5 Exploring the raster data\nLet’s load the low resolution weekly and seasonal relative abundance cubes and use them to demonstrate some basic raster operations with the data.\n\nabd_weekly &lt;- load_raster(path, product = \"abundance\", resolution = \"mr\")\nabd_seasonal &lt;- load_raster(path, product = \"abundance\", period = \"seasonal\", \n                            resolution = \"mr\")\n\nThese cubes can easily be subset to a single week or season.\n\n# week of may 17\nabd_weekly[[\"2021-05-17\"]]\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : grbfir1_abundance_median_mr_2021.tif \n#&gt; name        : 2021-05-17 \n#&gt; min value   :       0.00 \n#&gt; max value   :       4.11\n# breeding season\nabd_seasonal[[\"breeding\"]]\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source      : grbfir1_abundance_seasonal_mean_mr_2021.tif \n#&gt; name        : breeding \n#&gt; min value   :     0.00 \n#&gt; max value   :     2.73\n\nWe can also subset the weekly cube to a range of weeks. For example, let’s subset to only the estimates for weeks in May, then take the average across the weeks.\n\n# determine which dates we want to include\nweek_dates &lt;- as.Date(names(abd_weekly))\nstart_date &lt;- as.Date(\"2021-05-01\")\nend_date &lt;- as.Date(\"2021-05-31\")\nweek_in_may &lt;- week_dates &gt;= start_date & week_dates &lt;= end_date\n\n# subset to weeks in may\nabd_weekly_may &lt;- abd_weekly[[week_in_may]]\n\n# average across weeks\nmean(abd_weekly_may, na.rm = TRUE)\n#&gt; class       : SpatRaster \n#&gt; dimensions  : 1877, 4504, 1  (nrow, ncol, nlyr)\n#&gt; resolution  : 8888, 8888  (x, y)\n#&gt; extent      : -2e+07, 2e+07, -6676023, 1e+07  (xmin, xmax, ymin, ymax)\n#&gt; coord. ref. : +proj=sinu +lon_0=0 +x_0=0 +y_0=0 +R=6371007.181 +units=m +no_defs \n#&gt; source(s)   : memory\n#&gt; name        : mean \n#&gt; min value   : 0.00 \n#&gt; max value   : 4.09\n\nMaking a simple map of the data will produce unexpected results. For example, let’s map the breeding season relative abundance for Green-backed Firecrown.\n\nplot(abd_seasonal[[\"breeding\"]])\n\n\n\n\n\n\n\n\nRecall that all eBird Status data products are provided for the entire globe, regardless of the range of the species. Also, notice that some areas, such as most of the Amazon Basin, have missing values indicating that there was insufficient data to make a prediction in the region. Other areas, such as North America, had sufficient data to predict that the species is absent. Let’s try using the GIS data included in the workshop data package to crop the raster to the Chilean region of Los Lagos to make a more meaningful map.\n\n# los lagos boundary, projected to match the raster data\nlos_lagos &lt;- read_sf(\"data/gis-data.gpkg\",  layer = \"ne_states\") %&gt;% \n  filter(state == \"Los Lagos\") %&gt;% \n  st_transform(crs = crs(abd_seasonal)) %&gt;% \n  st_geometry()\n# crop raster data to chile\nabd_breeding_ll &lt;- crop(abd_seasonal[[\"breeding\"]], los_lagos)\n# map\nplot(abd_breeding_ll)\nplot(los_lagos, add = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheckpoint\n\n\n\nLet’s take a break before proceeding onto some more realistic applications of the eBird Status data products. Make sure you’re comfortable loading the data into R and performing some of the basic operations."
  },
  {
    "objectID": "ebirdst.html#sec-ebirdst-applications",
    "href": "ebirdst.html#sec-ebirdst-applications",
    "title": "2  eBird Status Data Products",
    "section": "2.6 Applications",
    "text": "2.6 Applications\nThe remainder of the workshop will work through three example applications using the eBird Status data products:\n\nTrajectories: chart the change in the percent of the population in a region throughout the year for a set of species.\nRegional statistics: calculate the proportion of the breeding population falling within protected areas for a set of species.\nPrioritization: use eBird Status data products to identify important sites for protection of a set of species.\n\n\n2.6.1 Trajectories\nIn this application, we’ll look at the change in for populations for two species throughout the year in Los Lagos, Chile. We’ll consider Green-backed Firecrown and Patagonian Tyrant, two migrant species that are nearly endemic to Chile (data for both species are in the workshop data package). When comparing multiple species, or a single species between different seasons, as is the case here, it’s important to consider the proportion of population rather than relative abundance to mitigate the impact of differences in detectability between seasons and speces.\nLet’s start by loading the medium resolution weekly proportion of population cubes for these species as well as a boundary polygon for Los Lagos.\n\n# proportion of population cubes\npop_grbfir1 &lt;- get_species_path(\"grbfir1\", path = \"data/ebirdst-data/\") %&gt;% \n  load_raster(product = \"percent-population\", resolution = \"mr\")\npop_pattyr2 &lt;- get_species_path(\"pattyr2\", path = \"data/ebirdst-data/\") %&gt;% \n  load_raster(product = \"percent-population\", resolution = \"mr\")\n\n# los lagos boundary, projected to match the raster data\nlos_lagos &lt;- read_sf(\"data/gis-data.gpkg\", \"ne_states\") %&gt;% \n  filter(state == \"Los Lagos\") %&gt;% \n  st_transform(crs = crs(pop_grbfir1)) %&gt;% \n  st_geometry()\n\nNow, we’ll use the R package exactextractr to calculate the sum of the proportions for each species within Los Lagos.\n\n# sum within los lagos\n# firecrown\ntraj_grbfir1 &lt;- exact_extract(pop_grbfir1, los_lagos, fun = \"sum\")\ntraj_grbfir1 &lt;- data.frame(species = \"Green-backed Firecrown\",\n                           week = as.Date(names(pop_grbfir1)),\n                           prop_pop = as.numeric(traj_grbfir1[1, ]))\n# tyrant\ntraj_pattyr2 &lt;- exact_extract(pop_pattyr2, los_lagos, fun = \"sum\")\ntraj_pattyr2 &lt;- data.frame(species = \"Patagonian Tyrant\",\n                           week = as.Date(names(pop_pattyr2)),\n                           prop_pop = as.numeric(traj_pattyr2[1, ]))\n\n# combine\ntrajectories &lt;- bind_rows(traj_grbfir1, traj_pattyr2)\nhead(trajectories)\n#&gt;                  species       week prop_pop\n#&gt; 1 Green-backed Firecrown 2021-01-04    0.245\n#&gt; 2 Green-backed Firecrown 2021-01-11    0.243\n#&gt; 3 Green-backed Firecrown 2021-01-18    0.249\n#&gt; 4 Green-backed Firecrown 2021-01-25    0.245\n#&gt; 5 Green-backed Firecrown 2021-02-01    0.240\n#&gt; 6 Green-backed Firecrown 2021-02-08    0.238\n\nFinally we can plot the trajectories.\n\nggplot(trajectories, aes(x = week, y = prop_pop, color = species)) +\n  geom_line() +\n  scale_y_continuous(labels = scales::percent) +\n  labs(x = \"Week\", \n       y = \"% of population\",\n       title = \"Weekly % of population trajectory in Las Lagos\",\n       color = NULL) +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\n\n\n2.6.2 Regional statistics\nFor this application, we calculate the proportion of the population within protected areas in Chile for a set of species. As an example species group, we’ll use a set of 10 species that are endemic or nearly endemic to Chile. For migratory species we’ll focus on the breeding season.\n\nspecies_list &lt;- c(\"cthhue1\", \"chipig2\", \"chimoc1\", \"grbfir1\", \"chutap1\", \n                  \"pattyr2\", \"strwoo6\", \"chifli1\", \"thtray1\", \"auspar1\")\n\n# add common names, migrant/resident status, and quality\nspecies_list &lt;- filter(ebirdst_runs, species_code %in% species_list) %&gt;% \n  mutate(quality = ifelse(resident, resident_quality, breeding_quality)) %&gt;% \n  select(species_code, common_name, resident, quality)\nprint(species_list)\n#&gt; # A tibble: 10 × 4\n#&gt;   species_code common_name                 resident quality\n#&gt;   &lt;chr&gt;        &lt;chr&gt;                       &lt;lgl&gt;    &lt;chr&gt;  \n#&gt; 1 chipig2      Chilean Pigeon              TRUE     3      \n#&gt; 2 grbfir1      Green-backed Firecrown      FALSE    2      \n#&gt; 3 strwoo6      Striped Woodpecker          TRUE     3      \n#&gt; 4 chifli1      Chilean Flicker             TRUE     1      \n#&gt; 5 auspar1      Austral Parakeet            TRUE     3      \n#&gt; 6 cthhue1      Chestnut-throated Huet-huet TRUE     3      \n#&gt; # ℹ 4 more rows\n\nWe have two migrants and 8 resident species. Notice that 2 of these species have quality ratings of 1 indicating that caution should be exercised when using the results. For real world use you should examine the relative abundance maps for errors prior to using them for analysis; however, for this example, we’ll use this species list as is. We’ll load and combine the breeding (for migrants) and resident (for residents) percent of population layers for this list of species. Data for all 10 of these species has been included in the workshop data package.\n\n\n\n\n\n\nTip\n\n\n\nRelative abundance estimates are impacted by detection rates, which can vary between species. As a results, when comparing eBird Status and Trends data across species, it’s critical to always use the percent of population layers, which have been standardized by dividing each cell value by the total relative abundance across all cells.\n\n\n\n# loop over the species list extracting the seasonal percent of population\npercent_population &lt;- list()\nfor (i in seq_len(nrow(species_list))) {\n  # load the seasonal cube for this species\n  this_species &lt;- species_list[i, ]\n  pop &lt;- get_species_path(this_species$species_code, \n                          path = \"data/ebirdst-data/\") %&gt;% \n    load_raster(\"percent-population\", period = \"seasonal\", resolution = \"mr\")\n  \n  # subset to the layer we need: breeding or resident\n  pop &lt;- pop[[ifelse(this_species$resident, \"resident\", \"breeding\")]]\n  percent_population[[this_species$species_code]] &lt;- pop\n}\n# stack the rasters into a single object\npercent_population &lt;- rast(percent_population)\n\nThe GIS data available in the workshop data package contains polygon boundaries for public protected areas in Chile, let’s load them now and project to match the raster layers. For this example, we’ll combine all the protected area polygons together into one feature; however, this analysis could be modified to consider how the distribution of species varies between protected areas.\n\nprotected &lt;- read_sf(\"data/gis-data.gpkg\",  layer = \"protected_areas\") %&gt;% \n  st_combine() %&gt;% \n  st_transform(crs = crs(percent_population))\n\nFinally, we can use exactextracr to calculate the total percent of population within protected areas for each species.\n\npercent_protected &lt;- exact_extract(percent_population, protected, fun = \"sum\")\npercent_protected &lt;- as.numeric(percent_protected[1, ])\npercent_protected &lt;- data.frame(species_code = species_list$species_code,\n                                common_name = species_list$common_name,\n                                percent_population = percent_protected) %&gt;% \n  arrange(desc(percent_population))\nprint(percent_protected)\n#&gt;    species_code                 common_name percent_population\n#&gt; 1       pattyr2           Patagonian Tyrant            0.26731\n#&gt; 2       thtray1       Thorn-tailed Rayadito            0.22318\n#&gt; 3       chutap1             Chucao Tapaculo            0.19268\n#&gt; 4       auspar1            Austral Parakeet            0.18515\n#&gt; 5       grbfir1      Green-backed Firecrown            0.15635\n#&gt; 6       strwoo6          Striped Woodpecker            0.13113\n#&gt; 7       chifli1             Chilean Flicker            0.12565\n#&gt; 8       chipig2              Chilean Pigeon            0.07410\n#&gt; 9       cthhue1 Chestnut-throated Huet-huet            0.03652\n#&gt; 10      chimoc1         Chilean Mockingbird            0.00682\n\n# plot the data\nggplot(percent_protected) +\n  aes(x = fct_reorder(common_name, percent_population),\n      y = percent_population) +\n  geom_col() +\n  scale_y_continuous(labels = scales::percent) +\n  labs(x = NULL, y = \"Percent of population in protected areas\") +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n2.6.3 Prioritization\nFor the final application, we’ll perform a multi-species site prioritization exercise, identifying important sites for protecting the set of 10 near-endemic species we identified in the previous application. Let’s start by generating a multi-species importance layer by calculating the mean percent of population across all 10 species. Since we’re focused on identifying sites in Chile, we’ll also crop and mask the importance layer to a boundary of Chile.\n\n# boundary of chile\nchile &lt;- read_sf(\"data/gis-data.gpkg\", layer = \"ne_states\") %&gt;% \n  filter(country_code == \"CL\") %&gt;% \n  st_transform(crs = crs(percent_population))\n\n# importance: mean percent of population across species\n# fill missing values with zeros prior to averaging\nimportance &lt;- ifel(is.na(percent_population), 0, percent_population) %&gt;% \n  mean(na.rm = TRUE) %&gt;% \n  # crop and mask importance to focus on chile\n  crop(chile) %&gt;% \n  mask(chile)\n\n# plot the square root of importance since the data are right skewed\npar(mar = c(0.25, 0.25, 0.25, 0.25))\ncrs &lt;- \"+proj=laea +lat_0=-40 +lon_0=-72\"\nr_plot &lt;- sqrt(importance) %&gt;% \n  project(crs, method = \"near\") %&gt;% \n  trim()\nplot(r_plot, axes = FALSE)\n\n\n\n\n\n\n\n\nThe absolute numbers in this map are challenging to interpret (they’re the mean proportion of the population across the 10 species in each cell). Instead, the values should be interpreted in relative terms, giving the relative importance of each cell for this set of 10 species.\nIn the previous application, we examined existing public protected areas. For the sake of comparison, let’s imagine we want to identify the most important sites in Chile that cover the same area as the existing protected area network. What proportion of Chile does the current protected area network cover?\n\n# proportion of chile in existing protected area network\narea_chile &lt;- sum(st_area(chile))\narea_protected &lt;- st_area(protected)\nproportion_protected &lt;- as.numeric(area_protected / area_chile)\nprint(proportion_protected)\n#&gt; [1] 0.207\n\nSo, 20.7% of Chile is covered by the existing network of public protected areas. Let’s identify the top 20.7% most important raster cells from the multi-species importance layer.\n\n# identify the quantile corresponding to the desired protection level\nq &lt;- global(importance, fun = quantile, \n            probs = 1 - proportion_protected, na.rm = TRUE) %&gt;% \n  as.numeric()\n# identify the most importance cells\nselected_sites &lt;- as.numeric(importance &gt;= q)\n\nLet’s compare maps of the existing protected area network and the sites selected using eBird Status and Trends.\n\npar(mar = c(0.25, 0.25, 0.25, 0.25))\n\n# high importance\nr_plot &lt;- project(selected_sites, crs, method = \"near\") %&gt;% \n  trim()\nprotected_proj &lt;- st_transform(protected, crs = crs) %&gt;% \n  st_geometry()\nplot(r_plot, axes = FALSE, legend = FALSE)\n\n# existing\nplot(st_simplify(protected_proj), \n     col = \"#00000088\", border = NA,\n     add = TRUE)\n\n\n\n\n\n\n\n\nThe high importance sites we identified are shown in green, while the existing protected area network is overlayed in grey. It appears the existing protected area network is mostly in southern Chile and there is limited overlap with areas of high importance to the 10 near-endemic species we chose to focus on. This is not surprising since the location of existing protected areas was not chosen specifically to protect these 10 species. Let’s quantify what proportion of the population these two regions capture.\n\n# mask the percent of population layers by the selected sites\nselected_pp &lt;- percent_population %&gt;% \n  crop(selected_sites) %&gt;% \n  mask(selected_sites, maskvalues = c(0, NA))\n# calculate total percent of population within proposed sites\npercent_selected &lt;- global(selected_pp, fun = \"sum\", na.rm = TRUE)\npercent_selected &lt;- data.frame(species_code = names(selected_pp),\n                               selected_percent = percent_selected[, 1])\n\n# combine with values for existing network\ncomparison &lt;- inner_join(percent_protected, percent_selected,\n                         by = \"species_code\") %&gt;% \n  rename(existing_network = percent_population,\n         prioritized_sites = selected_percent) %&gt;% \n  pivot_longer(cols = c(existing_network, prioritized_sites),\n               names_to = \"network_type\",\n               values_to = \"percent_population\")\n\n# plot the data\nggplot(comparison) +\n  aes(x = fct_reorder(common_name, percent_population),\n      y = percent_population,\n      group = network_type,\n      fill = network_type) +\n  geom_col(position = \"dodge\") +\n  scale_y_continuous(labels = scales::percent) +\n  scale_fill_brewer(palette = \"Set1\") +\n  labs(x = NULL, \n       y = \"Percent of population in protected areas\",\n       fill = NULL) +\n  coord_flip() +\n  theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nSo, for the same total area, we could capture a much larger proportion of the populations of these species if we use eBird Status data products for these species in our site prioritization. This example is, of course, overly simplistic. For example, in a real world application, different sites have different costs associated with protection and you would want to account for that during prioritization. For more complex prioritization problems, systematic conservation planning tools like the R package prioritizr can be used effectively with eBird Status data products."
  },
  {
    "objectID": "intror.html",
    "href": "intror.html",
    "title": "1  Introducción al entorno R en el contexto de eBird",
    "section": "",
    "text": "1.1 Introducción",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción al entorno R en el contexto de eBird</span>"
    ]
  },
  {
    "objectID": "distabund.html",
    "href": "distabund.html",
    "title": "3  Modelamiento de distribución y abundancia relativa",
    "section": "",
    "text": "3.1 Introduction",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Modelamiento de distribución y abundancia relativa</span>"
    ]
  }
]