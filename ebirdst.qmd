---
output: html_document
editor:
    mode: source
editor_options: 
  chunk_output_type: console
---

# Productos de Estados y Tendencias de eBird {#sec-ebirdst}

El proyecto Estados y Tendencias utiliza modelos de machine learning de ciclo anual completo que combinan datos de eBird con datos de teledetección y toman en cuenta las variaciones en el comportamiento y el esfuerzo de los observadores para producir estimaciones semanales de alta resolución de los límites de distribución, la tasa de ocurrencia y la abundancia relativa de las especies de aves. La última versión, con estimaciones hasta el año 2023, incluye resultados para 2981 especies en todo el mundo, de las cuales 471 han sido registradas en Chile. Las visualizaciones interactivas de estas especies están disponibles en el [sitio web de eBird Estados y Tendencias](https://science.ebird.org/es/status-and-trends) y los productos de datos de Estados y Tendencias de eBird están disponibles a través del paquete de R [`ebirdst`](https://ebird.github.io/ebirdst/).

En este modulo nos familiarizaremos con los productos de datos de Estados y Tendencias de eBird y el paquete R `ebirdst`, desarrollado específicamente para trabajar con estos datos. Presentaremos la gama de datos disponibles y, a continuación, les mostraremos cómo descargar estos productos de datos y cargarlos en R para su posterior análisis. Luego, trabajaremos con una serie de ejemplos de aplicaciones prácticas. Comencemos cargando los paquetes que utilizaremos a lo largo de este taller.

![© Tamara Catalán Bermudez, Macaulay Library (#327967101)](images/grbfir1_327967101.jpg)

```{r}
#| label: ebirdst-packages
library(dplyr)
library(ebirdst)
library(exactextractr)
library(forcats)
library(ggplot2)
library(readr)
library(sf)
library(stringr)
library(terra)
library(tidyr)
```

## Data access {#sec-ebirdst-access}

El acceso a los productos de Estados y Tendencias de eBird se obtiene mediante un formulario de solicitud de acceso disponible en: <https://ebird.org/st/request>. Las condiciones de uso se han diseñado para ser bastante permisivas en muchos casos, especialmente en lo que respecta al uso académico y de investigación. Después de leer las [Condiciones de uso de los productos de estado y tendencias de eBird](https://ebird.org/science/status-and-trends/st-data-access-terms-of-use/) y rellenar el [Formulario de solicitud de acceso](https://ebird.org/st/request), se le proporcionará una clave de acceso alfanumérica. Para almacenar la clave de acceso de modo que R y el paquete `ebirdst` puedan acceder a ella, ejecute lo siguiente (sustituyendo `"XXXXXXXXX"` por su clave real):

```{r}
#| label: ebirdst-access-key
#| eval: true
set_ebirdst_access_key("fvlcg6pt15cs", overwrite = TRUE)
```

A continuación, **reinicie R** inmediatamente. Esto guardará la clave de acceso como variable de entorno EBIRDST_KEY en su archivo .Renviron, de modo que pueda acceder a ella desde su sesión de R.

::: callout-important
## Checkpoint

Para asegurarte de que tu clave de acceso a los datos funciona, intenta ejecutar el siguiente código, que descargará un único archivo pequeño. Si no funciona, habla con el instructor o envíanos un correo para buscar una solución al problema.

```{r}
#| label: ebirdst-access-sol
#| eval: true
dir.create("data/ebirdst-data", recursive = TRUE, showWarnings = FALSE) 

ebirdst_download_status("grbfir1", pattern = "abundance_median_3km", path = "data/ebirdst-data/", force = TRUE)
```
:::

## Especies con Estados y Tendencias {#sec-ebirdst-species}

El objeto `ebirdst_runs` es un data frame que enumera todas las especies disponibles:

```{r species}
#| label: ebirdst-species-runs
glimpse(ebirdst_runs)
```

Desde RStudio también puedes utilizar `View()` para explorar de forma interactiva la base de datos. También puedes consultar la página de [especies en Estados y Tendencias](https://science.ebird.org/en/status-and-trends/species) para ver la lista completa de especies disponibles. En esta página puedes filtrar por región, por ejemplo, para ver solo aquellas especies con alguna parte de su área de distribución [dentro de Chile](https://science.ebird.org/en/status-and-trends/species?regionCode=CL).

### Revisión de expertos {#sec-ebirdst-review}

Todas las especies pasan por un proceso de revisión por parte de expertos humanos antes de ser publicadas. El marco de datos «ebirdst_runs» también contiene información de este proceso de revisión. Los revisores evalúan cada una de las cuatro estaciones: reproducción, no reproducción, migración previa a la reproducción y migración posterior a la reproducción. Las especies residentes (es decir, no migratorias) se identifican con el valor «TRUE» en la columna `resident` column of `ebirdst_runs`, y estas especies se evalúan a lo largo de todo el año en lugar de por temporadas. «ebirdst_runs» contiene dos datos importantes para cada estación: una calificación de **calidad (quality)**  y **fechas estacionales (seasonal dates)**.

Las seasonal dates definen las semanas que comprenden cada estación; las estimaciones de abundancia relativa para estas semanas se promedian para producir los mapas de abundancia relativa estacional en el sitio de Estados y Tendencias. Las fechas de la temporada reproductiva y no reproductiva se definen para cada especie como las semanas durante esas estaciones en las que la población de la especie no se desplaza. Por esta razón, estas estaciones también se describen como períodos estacionarios. Los períodos de migración se definen como los períodos de movimiento entre las temporadas estacionarias no reproductivas y reproductivas. Cabe señalar que, para muchas especies, estos períodos migratorios incluyen no solo el movimiento desde las zonas de reproducción a las zonas no reproductivas, sino también la dispersión posterior a la reproducción, la migración por muda y otros movimientos.

Los revisores también examinan las estimaciones del modelo para cada temporada con el fin de evaluar el grado de extrapolación u omisión presente en el modelo, y asignan una calificación de **calidad** asociada que va de 0 (calidad más baja) a 3 (calidad más alta). La extrapolación se refiere a los casos en los que el modelo predice la presencia de una especie cuando se sabe que está ausente, mientras que la omisión se refiere a los casos en los que el modelo no predice la presencia de una especie cuando se sabe que está presente.

Una calificación de 0 implica que esta temporada no ha superado la revisión y que los resultados del modelo no deben utilizarse en absoluto para este período. Las calificaciones de 1 a 3 corresponden a un gradiente de mayor a menor extrapolación y/u omisión, y a menudo utilizamos una analogía con los semáforos para referirnos a ellas:

1.  [**Luz roja (1)**]{style="color:#f20a02"}: baja calidad, extrapolación y/u omisión extensas y ruido, pero al menos algunas regiones tienen estimaciones precisas; se puede utilizar con precaución en determinadas regiones.
2.  [**Luz amarilla (2)**]{style="color:#f2ea49"}: calidad media, cierta extrapolación y/u omisión; utilizar con precaución.
3.  [**Luz verde (3)**]{style="color:#00cc25"}: calidad alta, muy poca o ninguna extrapolación y/u omisión; estas temporadas se pueden utilizar con seguridad.

::: {.callout-caution icon="false"}
## Ejercicio

Elije una especie que te interese. Identifica las fechas estacionales y la calificacion de calidad.
:::

::: {.callout-note icon="false" collapse="true"}
## Solución

El Picaflor chico está catalogado como migratorio, con una calificación de calidad de 2 en las cuatro estaciones, lo que sugiere que hay alguna extrapolación u omisión.

```{r}
#| label: ebirdst-review-sol
ebirdst_runs %>% 
  filter(scientific_name == "Sephanoides sephaniodes") %>% 
  glimpse()
```
:::

## Descarga de datos {#sec-ebirdst-download}

La función `ebirdst_download_status()` descarga datos de una sola especie a partir del nombre de la especie (nombre común, nombre científico o código de especie). Por ejemplo, para descargar los datos del Picaflor chico, utilice:

```{r}
#| label: ebirdst-download-fake
#| eval: false
path <- ebirdst_download_status(species = "Sephanoides sephaniodes", path = "data/ebirdst-data")
path
```

```{r}
#| label: ebirdst-download-path
#| echo: false
path <- get_species_path("Sephanoides sephaniodes", path = "data/ebirdst-data")
path
```

La función identificará automáticamente una ubicación adecuada para almacenar los datos descargados y devolverá esa ruta, que hemos capturado en la variable `path`. Podemos ver qué archivos se han descargado con:

```{r}
#| label: ebirdst-download-list
list.files(path, recursive = TRUE)
```

Dentro de este directorio de paquetes de datos, los archivos están organizados según la siguiente estructura:

- `weekly/`: un directorio que contiene estimaciones semanales de ocurrencia, conteo, abundancia relativa y proporción de población en una cuadrícula regular en formato GeoTIFF con tres resoluciones. Ver más abajo para obtener más detalles.
- `seasonal/`: un directorio que contiene estimaciones estacionales de ocurrencia, conteo, abundancia relativa y proporción de población en una cuadrícula regular en formato GeoTIFF con tres resoluciones. Estas se derivan de los datos ráster semanales correspondientes. Las fechas que definen los límites de cada estación se establecen en función de cada especie por un revisor experto familiarizado con la misma. Estas fechas están disponibles en el marco de datos ebirdst_runs. Solo se incluyen las estaciones que han superado el proceso de revisión por expertos. Ver más abajo para obtener más detalles.
- `ranges/`: un directorio que contiene GeoPackages que almacenan polígonos de límites de distribución. Ver más abajo para obtener más detalles.
- `config.json`: parámetros específicos de la ejecución, principalmente para uso interno, pero que también contienen parámetros útiles para cartografiar los datos de abundancia.

::: callout-tip
## Tip

Los datos espaciales se dividen en dos grandes categorías: datos ráster y datos vectoriales. Los datos **ráster** representan los datos espaciales como una cuadrícula regular de celdas con un valor o conjunto de valores asignados a cada una. Los datos **vectoriales** representan los datos espaciales como puntos, líneas o polígonos discretos. En los productos de datos de eBird Status, los datos ráster se distribuyen como GeoTIFF, mientras que los datos vectoriales se distribuyen como GeoPackages.
:::

Para una especie cuyos datos ya se han descargado, puede utilizar `get_species_path("Sephanoides sephaniodes")` para identificar la ruta de acceso a los datos.

### Descarga de archivos específicos {#sec-ebirdst-download-specific}

El paquete completo de datos de cada especie contiene un gran número de archivos, muchos de los cuales pueden ser innecesarios para su aplicación. Puede utilizar el argumento `dry_run = TRUE` en `ebirdst_download()` para obtener una lista de los archivos disponibles sin descargarlos.

```{r}
#| label: ebirdst-download-specific-dryrun
ebirdst_download_status("Sephanoides sephaniodes", dry_run = TRUE)
```

Una vez identificados los archivos que desea, puede utilizar el argumento `pattern` para descargar solo esos archivos. Por ejemplo, imaginemos que solo queremos los archivos `abundance`:

```{r}
#| label: ebirdst-download-specific-pattern
#| eval: false
ebirdst_download_status("Sephanoides sephaniodes", pattern = "abundance", path = "data/ebirdst-data/")
```

## Cargando datos en R {#sec-ebirdst-load}

En este curso, nos centraremos en los productos de datos ráster, que se pueden cargar en R utilizando la función `load_raster()` de `ebirdst`. En R, utilizaremos el paquete `terra` para trabajar con datos ráster. Los productos de datos ráster se dividen en dos grandes categorías que proporcionan estimaciones semanales y estacionales.

### Estimaciones semanales ráster {#sec-ebirdst-load-weekly}

Los productos básicos de datos ráster son las estimaciones semanales de presencia, conteo, abundancia relativa y proporción de población. Todas las estimaciones son el valor medio esperado para un listado con desplazamiento de eBird de 1 km y 1 hora realizado por un observador experto en el momento óptimo del día y en las condiciones meteorológicas óptimas para observar la especie en cuestión.

- **Ocurrencia** `occurrence`: la probabilidad esperada de encontrar una especie.
- **Conteo** `count`: el conteo esperado de una especie, condicionado a su ocurrencia en la ubicación dada.
- **Abundancia relativa** `abundance`: la abundancia relativa esperada de una especie, calculada como el producto de la probabilidad de ocurrencia y el conteo condicionado a la ocurrencia. Además de la abundancia relativa mediana, se proporcionan intervalos de confianza (IC) superiores e inferiores, definidos en el decil 10 y el decil 90 de la abundancia relativa, respectivamente.
- **Proporción de población** `proportion-population`: la proporción de la abundancia relativa total dentro de cada celda. Se trata de un producto derivado que se calcula dividiendo cada valor de celda de abundancia relativa del ráster por la suma de todos los valores de celda.

Todas las predicciones se realizan en una cuadrícula global estándar de 2,96 km x 2,96 km; sin embargo, también se proporcionan archivos GeoTIFF de menor resolución, que suelen ser mucho más rápidos de manejar. Las tres resoluciones son:

- Alta resolución (`3km`): datos con una resolución nativa de 2,96 km.
- Resolución media (`9km`): datos `3km` agregados por un factor de 3 en cada dirección, lo que da como resultado una resolución de 8,89 km.
- Baja resolución (`27km`): datos `3km` agregados por un factor de 9 en cada dirección, lo que da como resultado una resolución de 26,7 km.

Los archivos semanales utilizan la siguiente convención de nomenclatura:

`weekly/<species_code>_<product>_<metric>_<resolution>_<year>.tif`

donde `metric` suele ser `median`, excepto en los IC de abundancia relativa, que utilizan `lower` y `upper`. La función `load_raster()` se utiliza para cargar estos datos en R y toma argumentos para `product`, `metric` y `resolution`. Por ejemplo, para cargar la abundancia relativa mediana de alta resolución, utilice:

```{r}
#| label: ebirdst-load-weekly-abd
abd_median_3km <- load_raster(species = "grbfir1", 
                              path = "data/ebirdst-data/", 
                              product = "abundance", 
                              period = "weekly", 
                              metric = "median", 
                              resolution = "3km")
print(abd_median_3km)
```

A menudo nos referimos a estos objetos ráster como `cubos semanales` (por ejemplo, el `cubo de abundancia semanal`). Obsérvese que los cubos contienen 52 capas, que corresponden a las semanas del año. Los nombres de las capas son las fechas asociadas al punto medio de cada semana.

```{r}
#| label: ebirdst-load-weekly-parse
as.Date(names(abd_median_3km))
```

Como otro ejemplo, podríamos cargar los intervalos de confianza de abundancia superior e inferior de baja resolución.

```{r}
#| label: ebirdst-load-weekly-ci
abd_lower_27km <- load_raster(species = "grbfir1", 
                              path = "data/ebirdst-data/",
                              product = "abundance", 
                              metric = "lower", 
                              period = "weekly",
                              resolution = "27km")

abd_upper_27km <- load_raster(species = "grbfir1", 
                              path = "data/ebirdst-data/",
                              product = "abundance", 
                              metric = "upper", 
                              period = "weekly",
                              resolution = "27km")
```

::: {.callout-caution icon="false"}
## Ejercicio

Intente cargar el cubo del porcentaje medio semanal de la población con una resolución media.
:::

::: {.callout-note icon="false" collapse="true"}
## Solución

```{r}
#| label: ebirdst-load-weekly-sol
pct_pop <- load_raster(species = "grbfir1", 
                       path = "data/ebirdst-data/",
                       product = "proportion-population", 
                       metric = "median", 
                       resolution = "9km")
print(pct_pop)
```
:::

### Rásters de estimaciones estacionales {#sec-ebirdst-load-seasonal}

Los rásters de estimaciones estacionales se proporcionan para el mismo conjunto de productos y con las mismas tres resoluciones que las estimaciones semanales. Se obtienen a partir de los datos semanales tomando la media o el máximo por celda a lo largo de las semanas de cada estación. Recuerde que las fechas límite estacionales están disponibles en `ebirdst_runs`; no se proporcionan datos para las estaciones con una puntuación de calidad de 0.

Los GeoTIFF estacionales utilizan la siguiente convención de nomenclatura:

`seasonal/<species_code>_<product>_seasonal_<metric>_<resolution>_<year>.tif`

donde `metric` es `mean` o `max`. La función `load_raster(period = "seasonal")` se utiliza para cargar estos datos en R y toma argumentos para `product`, `metric` y `resolution`. Por ejemplo, para cargar la abundancia relativa estacional media de baja resolución, utilice:
```{r}
#| label: ebirdst-load-seasonal-abd
abd_seasonal_mean <- load_raster(species = "grbfir1", 
                                 path = "data/ebirdst-data/",
                                 product = "abundance", 
                                 period = "seasonal", 
                                 metric = "mean", 
                                 resolution = "27km")
print(abd_seasonal_mean)
```

Observe que hay cuatro capas en este ráster que corresponden a las cuatro estaciones.

```{r}
#| label: ebirdst-load-seasonal-seasons
names(abd_seasonal_mean)
```

Por último, para mayor comodidad, los productos de datos incluyen rásteres anuales que resumen la media o el máximo de todas las semanas que caen dentro de una estación que ha superado el proceso de revisión por expertos. Se puede acceder a ellos de forma similar a los productos estacionales, solo que con «period = "full-year"» en lugar de «period = "week"». Por ejemplo, estas capas se pueden utilizar en la planificación de la conservación para evaluar los sitios más importantes en todo el área de distribución y el ciclo anual completo de una especie.

```{r}
abd_fy_max <- load_raster(species = "grbfir1",  
                          path = "data/ebirdst-data/", 
                          product = "abundance", 
                          period = "full-year", 
                          metric = "max", 
                          resolution = "3km")
```

## Explorando los datos ráster {#sec-ebirdst-explore}

Carguemos los ráster de abundancia relativa semanal y estacional de baja resolución y utilicémoslos para demostrar algunas operaciones ráster básicas con los datos.

```{r}
#| label: ebirdst-explore-load
abd_weekly <- load_raster(species = "grbfir1",  
                          path = "data/ebirdst-data/",
                          product = "abundance", 
                          resolution = "27km")

abd_seasonal <- load_raster(species = "grbfir1",  
                            path = "data/ebirdst-data/", 
                            product = "abundance", 
                            period = "seasonal", 
                            resolution = "27km")
```

Estos ráster se pueden dividir fácilmente en subconjuntos de una sola semana o temporada.

```{r}
#| label: ebirdst-explore-subset
# week of may 17
abd_weekly[["2023-05-17"]]

# breeding season
abd_seasonal[["breeding"]]
```

También podemos dividir el ráster semanal en un rango de semanas. Por ejemplo, dividamos solo las estimaciones de las semanas de mayo y luego calculemos el promedio de todas las semanas.

```{r}
#| label: ebirdst-explore-mean
# determine qué fechas podemos incluir
week_dates <- as.Date(names(abd_weekly))
start_date <- as.Date("2023-05-01")
end_date <- as.Date("2023-05-31")
week_in_may <- week_dates >= start_date & week_dates <= end_date

# subset a las semanas de mayo
abd_weekly_may <- abd_weekly[[week_in_may]]

# promedio semanal
mean(abd_weekly_may, na.rm = TRUE)
```

Crear un mapa sencillo con los datos producirá resultados inesperados. Por ejemplo, vamos a trazar un mapa de la abundancia relativa durante la temporada de reproducción del Picaflro chico.

```{r}
#| label: ebirdst-explore-map
plot(abd_seasonal[["breeding"]])
```

Recuerda que todos los productos de datos de eBird Status se proporcionan para todo el mundo, independientemente del área de distribución de las especies. Además, tenga en cuenta que algunas zonas, como la mayor parte de la cuenca del Amazonas, tienen valores faltantes, lo que indica que no se disponía de datos suficientes para hacer una predicción en la región. Otras zonas, como América del Norte, contaban con datos suficientes para predecir que la especie está ausente. Probemos a utilizar los datos SIG incluidos en el paquete de datos del curso para recortar el ráster a la región de Los Lagos y crear un mapa más significativo.

```{r}
#| label: ebirdst-explore-chilemap
# Límite de Los Lagos, proyectado para coincidir con los datos ráster.
los_lagos <- read_sf("data/gis-data.gpkg",  layer = "ne_states") %>% 
  filter(state == "Los Lagos") %>% 
  st_transform(crs = crs(abd_seasonal)) %>% 
  st_geometry()

# Recortar datos ráster a Chile
abd_breeding_ll <- crop(abd_seasonal[["breeding"]], los_lagos)

# mapear
plot(abd_breeding_ll)
plot(los_lagos, add = TRUE)
```

::: callout-important
## Checkpoint

Hagamos una pausa antes de continuar con algunas aplicaciones más realistas de los productos de datos de eBird Status. Asegúrate de que te sientes cómodo cargando los datos en R y realizando algunas de las operaciones básicas.
:::

## Applications {#sec-ebirdst-applications}

The remainder of the workshop will work through three example applications using the eBird Status data products:

1.  [Trajectories](#sec-ebirdst-applications-trajectories): chart the change in the percent of the population in a region throughout the year for a set of species.
2.  [Regional statistics](#sec-ebirdst-applications-stats): calculate the proportion of the breeding population falling within protected areas for a set of species.
3.  [Prioritization](#sec-ebirdst-applications-prioritization): use eBird Status data products to identify important sites for protection of a set of species.

### Trajectories {#sec-ebirdst-applications-trajectories}

In this application, we'll look at the change in for populations for two species throughout the year in Los Lagos, Chile. We'll consider Green-backed Firecrown and Patagonian Tyrant, two migrant species that are nearly endemic to Chile (data for both species are in the workshop data package). When comparing multiple species, or a single species between different seasons, as is the case here, it's important to consider the proportion of population rather than relative abundance to mitigate the impact of differences in detectability between seasons and speces.

Let's start by loading the medium resolution weekly proportion of population cubes for these species as well as a boundary polygon for Los Lagos.

```{r}
#| label: ebirdst-applications-trajectories-data
# proportion of population cubes
pop_grbfir1 <- load_raster(species = "grbfir1", 
                       path = "data/ebirdst-data/",
                       product = "proportion-population", 
                       metric = "median", 
                       resolution = "9km")


ebirdst_download_status("Patagonian Tyrant", path = "data/ebirdst-data/")

pop_pattyr2 <- load_raster(species = "pattyr2", 
                       path = "data/ebirdst-data/",
                       product = "proportion-population", 
                       metric = "median", 
                       resolution = "9km")

# los lagos boundary, projected to match the raster data
los_lagos <- read_sf("data/gis-data.gpkg", "ne_states") %>% 
  filter(state == "Los Lagos") %>% 
  st_transform(crs = crs(pop_grbfir1)) %>% 
  st_geometry()
```

Now, we'll use the R package `exactextractr` to calculate the sum of the proportions for each species within Los Lagos.

```{r}
#| label: ebirdst-applications-trajectories-summarize
# sum within los lagos
# firecrown
traj_grbfir1 <- exact_extract(pop_grbfir1, los_lagos, fun = "sum")
traj_grbfir1 <- data.frame(species = "Green-backed Firecrown",
                           week = as.Date(names(pop_grbfir1)),
                           prop_pop = as.numeric(traj_grbfir1[1, ]))
# tyrant
traj_pattyr2 <- exact_extract(pop_pattyr2, los_lagos, fun = "sum")
traj_pattyr2 <- data.frame(species = "Patagonian Tyrant",
                           week = as.Date(names(pop_pattyr2)),
                           prop_pop = as.numeric(traj_pattyr2[1, ]))

# combine
trajectories <- bind_rows(traj_grbfir1, traj_pattyr2)
head(trajectories)
```

Finally we can plot the trajectories.

```{r}
#| label: ebirdst-applications-trajectories-plot
ggplot(trajectories, aes(x = week, y = prop_pop, color = species)) +
  geom_line() +
  scale_y_continuous(labels = scales::percent) +
  labs(x = "Week", 
       y = "% of population",
       title = "Weekly % of population trajectory in Las Lagos",
       color = NULL) +
  theme(legend.position = "bottom")
```

### Regional statistics {#sec-ebirdst-applications-stats}

For this application, we calculate the proportion of the population within protected areas in Chile for a set of species. As an example species group, we'll use a set of 10 species that are endemic or nearly endemic to Chile. For migratory species we’ll focus on the breeding season.

```{r}
#| label: ebirdst-applications-stats
species_list <- c("cthhue1", "chipig2", "chimoc1", "grbfir1", "chutap1", 
                  "pattyr2", "strwoo6", "chifli1", "thtray1", "auspar1")

# download data for this list of species
for (i in 1:length(species_list)){
  ebirdst_download_status(species_list[i], path = "data/ebirdst-data/", pattern = "proportion-population_seasonal_mean_9km")
}

# add common names, migrant/resident status, and quality
species_list <- filter(ebirdst_runs, species_code %in% species_list) %>% 
  mutate(quality = ifelse(is_resident, resident_quality, breeding_quality)) %>% 
  select(species_code, common_name, is_resident, quality)
print(species_list)
```

We have two migrants and 8 resident species. Notice that `r sum(species_list$quality == 1)` of these species have quality ratings of 1 indicating that caution should be exercised when using the results. For real world use you should examine the relative abundance maps for errors prior to using them for analysis; however, for this example, we'll use this species list as is. We'll load and combine the breeding (for migrants) and resident (for residents) percent of population layers for this list of species. Data for all 10 of these species has been included in the workshop data package.

::: callout-tip
## Tip

Relative abundance estimates are impacted by detection rates, which can vary between species. As a results, when comparing eBird Status and Trends data across species, it's critical to always use the percent of population layers, which have been standardized by dividing each cell value by the total relative abundance across all cells.
:::

```{r}
#| label: ebirdst-applications-pop
# loop over the species list extracting the seasonal percent of population
proportion_population <- list()
for (i in seq_len(nrow(species_list))) {
  # load the seasonal cube for this species
  this_species <- species_list[i, ]
  pop <- load_raster(this_species$species_code, 
                     path = "data/ebirdst-data", 
                     product = "proportion-population", 
                     period = "seasonal",
                     resolution = "9km")
  
  # subset to the layer we need: breeding or resident
  pop <- pop[[ifelse(this_species$is_resident, "resident", "breeding")]]
  proportion_population[[this_species$species_code]] <- pop
}
# stack the rasters into a single object
proportion_population <- rast(proportion_population)
```

The GIS data available in the workshop data package contains polygon boundaries for public protected areas in Chile, let's load them now and project to match the raster layers. For this example, we'll combine all the protected area polygons together into one feature; however, this analysis could be modified to consider how the distribution of species varies between protected areas.

```{r}
#| label: ebirdst-applications-protected
protected <- read_sf("data/gis-data.gpkg",  layer = "protected_areas") %>% 
  st_combine() %>% 
  st_transform(crs = crs(proportion_population))
```

Finally, we can use `exactextracr` to calculate the total percent of population within protected areas for each species.

```{r}
#| label: ebirdst-applications-ee
percent_protected <- exact_extract(proportion_population, protected, fun = "sum")
percent_protected <- as.numeric(percent_protected[1, ])
percent_protected <- data.frame(species_code = species_list$species_code,
                                common_name = species_list$common_name,
                                proportion_population = percent_protected) %>% 
  arrange(desc(proportion_population))
print(percent_protected)

# plot the data
ggplot(percent_protected) +
  aes(x = fct_reorder(common_name, proportion_population),
      y = proportion_population) +
  geom_col() +
  scale_y_continuous(labels = scales::percent) +
  labs(x = NULL, y = "Proportion of population in protected areas") +
  coord_flip()
```

### Prioritization {#sec-ebirdst-applications-prioritization}

For the final application, we'll perform a multi-species site prioritization exercise, identifying important sites for protecting the set of 10 near-endemic species we identified in the previous application. Let's start by generating a multi-species importance layer by calculating the mean percent of population across all 10 species. Since we're focused on identifying sites in Chile, we'll also crop and mask the importance layer to a boundary of Chile.

```{r}
#| label: ebirdst-applications-prioritization-import
# boundary of chile
chile <- read_sf("data/gis-data.gpkg", layer = "ne_states") %>% 
  filter(country_code == "CL") %>% 
  st_transform(crs = crs(proportion_population))

# importance: mean percent of population across species
# fill missing values with zeros prior to averaging
importance <- ifel(is.na(proportion_population), 0, proportion_population) %>% 
  mean(na.rm = TRUE) %>% 
  # crop and mask importance to focus on chile
  crop(chile) %>% 
  mask(chile)

# plot the square root of importance since the data are right skewed
par(mar = c(0.25, 0.25, 0.25, 0.25))
crs <- "+proj=laea +lat_0=-40 +lon_0=-72"
r_plot <- sqrt(importance) %>% 
  project(crs, method = "near") %>% 
  trim()
plot(r_plot, axes = FALSE)
```

The absolute numbers in this map are challenging to interpret (they're the mean proportion of the population across the 10 species in each cell). Instead, the values should be interpreted in relative terms, giving the relative importance of each cell for this set of 10 species.

In the previous application, we examined existing public protected areas. For the sake of comparison, let's imagine we want to identify the most important sites in Chile that cover the same area as the existing protected area network. What proportion of Chile does the current protected area network cover?

```{r}
#| label: ebirdst-applications-prioritization-area
# proportion of chile in existing protected area network
area_chile <- sum(st_area(chile))
area_protected <- st_area(protected)
proportion_protected <- as.numeric(area_protected / area_chile)
print(proportion_protected)
```

So, `r scales::percent(proportion_protected, 0.1)` of Chile is covered by the existing network of public protected areas. Let's identify the top `r scales::percent(proportion_protected, 0.1)` most important raster cells from the multi-species importance layer.

```{r}
#| label: ebirdst-applications-prioritization-top
# identify the quantile corresponding to the desired protection level
q <- global(importance, fun = quantile, 
            probs = 1 - proportion_protected, na.rm = TRUE) %>% 
  as.numeric()
# identify the most importance cells
selected_sites <- as.numeric(importance >= q)
```

Let's compare maps of the existing protected area network and the sites selected using eBird Status and Trends.

```{r}
#| label: ebirdst-applications-prioritization-maps
par(mar = c(0.25, 0.25, 0.25, 0.25))

# high importance
r_plot <- project(selected_sites, crs, method = "near") %>% 
  trim()
protected_proj <- st_transform(protected, crs = crs) %>% 
  st_geometry()
plot(r_plot, axes = FALSE, legend = FALSE)

# existing
plot(st_simplify(protected_proj), 
     col = "#00000088", border = NA,
     add = TRUE)
```

The high importance sites we identified are shown in green, while the existing protected area network is overlayed in grey. It appears the existing protected area network is mostly in southern Chile and there is limited overlap with areas of high importance to the 10 near-endemic species we chose to focus on. This is not surprising since the location of existing protected areas was not chosen specifically to protect these 10 species. Let's quantify what proportion of the population these two regions capture.

```{r}
#| label: ebirdst-applications-prioritization-compare
# mask the percent of population layers by the selected sites
selected_pp <- proportion_population %>% 
  crop(selected_sites) %>% 
  mask(selected_sites, maskvalues = c(0, NA))
# calculate total percent of population within proposed sites
percent_selected <- global(selected_pp, fun = "sum", na.rm = TRUE)
percent_selected <- data.frame(species_code = names(selected_pp),
                               selected_percent = percent_selected[, 1])

# combine with values for existing network
comparison <- inner_join(percent_protected, percent_selected,
                         by = "species_code") %>% 
  rename(existing_network = proportion_population,
         prioritized_sites = selected_percent) %>% 
  pivot_longer(cols = c(existing_network, prioritized_sites),
               names_to = "network_type",
               values_to = "proportion_population")

ggplot(comparison) +
  aes(x = fct_reorder(common_name, proportion_population, .fun = max),
      y = proportion_population,
      group = network_type,
      fill = network_type) +
  geom_col(position = "dodge") +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_brewer(palette = "Set1") +
  labs(x = NULL, 
       y = "Proportion of population in protected areas",
       fill = NULL) +
  coord_flip() +
  theme_linedraw() +
  theme(legend.position = "bottom")


```

So, for the same total area, we could capture a much larger proportion of the populations of these species if we use eBird Status data products for these species in our site prioritization. This example is, of course, overly simplistic. For example, in a real world application, different sites have different costs associated with protection and you would want to account for that during prioritization. For more complex prioritization problems, systematic conservation planning tools like the R package [`prioritizr`](https://prioritizr.net/) can be used effectively with eBird Status data products.
